"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[1883],{7582:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"JavaScript/OOP/OOP","title":"Object-Oriented Programming (OOP) in JavaScript","description":"Overview","source":"@site/docs/JavaScript/10_OOP/OOP.md","sourceDirName":"JavaScript/10_OOP","slug":"/JavaScript/OOP/OOP","permalink":"/knowledge-hub/docs/JavaScript/OOP/OOP","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/JavaScript/10_OOP/OOP.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance in JavaScript","permalink":"/knowledge-hub/docs/JavaScript/OOP/Inheritance"},"next":{"title":"Objects in JavaScript","permalink":"/knowledge-hub/docs/JavaScript/OOP/Objects"}}');var i=s(4848),r=s(8453);const l={},t="Object-Oriented Programming (OOP) in JavaScript",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Questions and Concepts",id:"key-questions-and-concepts",level:2},{value:"1. <strong>Does JavaScript Support Classes?</strong>",id:"1-does-javascript-support-classes",level:3},{value:"Example:",id:"example",level:4},{value:"2. <strong>What Are Objects in JavaScript?</strong>",id:"2-what-are-objects-in-javascript",level:3},{value:"Example:",id:"example-1",level:4},{value:"3. <strong>Why Should We Use OOP?</strong>",id:"3-why-should-we-use-oop",level:3},{value:"Parts of OOP in JavaScript",id:"parts-of-oop-in-javascript",level:2},{value:"1. <strong>Object Literal</strong>",id:"1-object-literal",level:3},{value:"Example:",id:"example-2",level:4},{value:"2. <strong>Constructor Function</strong>",id:"2-constructor-function",level:3},{value:"Example:",id:"example-3",level:4},{value:"3. <strong>Prototypes</strong>",id:"3-prototypes",level:3},{value:"Example:",id:"example-4",level:4},{value:"4. <strong>Classes</strong>",id:"4-classes",level:3},{value:"Example:",id:"example-5",level:4},{value:"5. <strong>Instances (new, this)</strong>",id:"5-instances-new-this",level:3},{value:"Example:",id:"example-6",level:4},{value:"The 4 Pillars of OOP",id:"the-4-pillars-of-oop",level:2},{value:"1. <strong>Abstraction</strong>",id:"1-abstraction",level:3},{value:"Example:",id:"example-7",level:4},{value:"2. <strong>Encapsulation</strong>",id:"2-encapsulation",level:3},{value:"Example:",id:"example-8",level:4},{value:"3. <strong>Inheritance</strong>",id:"3-inheritance",level:3},{value:"Example:",id:"example-9",level:4},{value:"4. <strong>Polymorphism</strong>",id:"4-polymorphism",level:3},{value:"Example:",id:"example-10",level:4},{value:"Additional Interesting Points",id:"additional-interesting-points",level:2},{value:"Summary",id:"summary",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"object-oriented-programming-oop-in-javascript",children:"Object-Oriented Programming (OOP) in JavaScript"})}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(e.p,{children:"Object-Oriented Programming (OOP) is a programming paradigm that organizes software design around objects and data rather than functions and logic. JavaScript, being a multi-paradigm language, supports OOP through prototypes and, more recently, classes."}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"key-questions-and-concepts",children:"Key Questions and Concepts"}),"\n",(0,i.jsxs)(e.h3,{id:"1-does-javascript-support-classes",children:["1. ",(0,i.jsx)(e.strong,{children:"Does JavaScript Support Classes?"})]}),"\n",(0,i.jsxs)(e.p,{children:["Yes, JavaScript supports classes starting from ",(0,i.jsx)(e.strong,{children:"ES6 (ECMAScript 2015)"}),". However, under the hood, JavaScript classes are syntactic sugar over its existing prototype-based inheritance."]}),"\n",(0,i.jsx)(e.h4,{id:"example",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person1 = new Person('Alice', 25);\nperson1.greet(); // \"Hello, my name is Alice\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"2-what-are-objects-in-javascript",children:["2. ",(0,i.jsx)(e.strong,{children:"What Are Objects in JavaScript?"})]}),"\n",(0,i.jsxs)(e.p,{children:["Objects in JavaScript are collections of key-value pairs. They can contain properties (data) and methods (functions). Built-in objects like ",(0,i.jsx)(e.code,{children:"toLowerCase"}),", ",(0,i.jsx)(e.code,{children:"Promise"}),", ",(0,i.jsx)(e.code,{children:"Array"}),", etc., are examples of objects in JavaScript."]}),"\n",(0,i.jsx)(e.h4,{id:"example-1",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const car = {\n  brand: 'Toyota',\n  model: 'Corolla',\n  year: 2020,\n  drive: function () {\n    console.log('Driving...');\n  }\n};\n\nconsole.log(car.brand); // \"Toyota\"\ncar.drive(); // \"Driving...\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"3-why-should-we-use-oop",children:["3. ",(0,i.jsx)(e.strong,{children:"Why Should We Use OOP?"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Modularity"}),": Code is organized into reusable components (objects/classes)."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Encapsulation"}),": Data and behavior are bundled together, protecting data from external interference."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Reusability"}),": Inheritance allows code reuse."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Maintainability"}),": Easier to debug and maintain structured code."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"parts-of-oop-in-javascript",children:"Parts of OOP in JavaScript"}),"\n",(0,i.jsxs)(e.h3,{id:"1-object-literal",children:["1. ",(0,i.jsx)(e.strong,{children:"Object Literal"})]}),"\n",(0,i.jsx)(e.p,{children:"The simplest way to create an object in JavaScript."}),"\n",(0,i.jsx)(e.h4,{id:"example-2",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const user = {\n  name: 'John',\n  age: 30,\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nuser.greet(); // \"Hello, John\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"2-constructor-function",children:["2. ",(0,i.jsx)(e.strong,{children:"Constructor Function"})]}),"\n",(0,i.jsxs)(e.p,{children:["A function used to create objects. It is invoked using the ",(0,i.jsx)(e.code,{children:"new"})," keyword."]}),"\n",(0,i.jsx)(e.h4,{id:"example-3",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.greet = function () {\n    console.log(`Hello, my name is ${this.name}`);\n  };\n}\n\nconst person1 = new Person('Alice', 25);\nperson1.greet(); // \"Hello, my name is Alice\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"3-prototypes",children:["3. ",(0,i.jsx)(e.strong,{children:"Prototypes"})]}),"\n",(0,i.jsx)(e.p,{children:"Every JavaScript object has a prototype. Prototypes allow objects to inherit properties and methods from other objects."}),"\n",(0,i.jsx)(e.h4,{id:"example-4",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function () {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person1 = new Person('Bob');\nperson1.greet(); // \"Hello, my name is Bob\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"4-classes",children:["4. ",(0,i.jsx)(e.strong,{children:"Classes"})]}),"\n",(0,i.jsx)(e.p,{children:"Introduced in ES6, classes provide a cleaner way to create objects and handle inheritance."}),"\n",(0,i.jsx)(e.h4,{id:"example-5",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst dog = new Dog('Rex');\ndog.speak(); // \"Rex barks.\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"5-instances-new-this",children:["5. ",(0,i.jsx)(e.strong,{children:"Instances (new, this)"})]}),"\n",(0,i.jsxs)(e.p,{children:["Instances are objects created using the ",(0,i.jsx)(e.code,{children:"new"})," keyword. The ",(0,i.jsx)(e.code,{children:"this"})," keyword refers to the current instance."]}),"\n",(0,i.jsx)(e.h4,{id:"example-6",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function Car(brand, model) {\n  this.brand = brand;\n  this.model = model;\n}\n\nconst car1 = new Car('Toyota', 'Corolla');\nconsole.log(car1.brand); // \"Toyota\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"the-4-pillars-of-oop",children:"The 4 Pillars of OOP"}),"\n",(0,i.jsxs)(e.h3,{id:"1-abstraction",children:["1. ",(0,i.jsx)(e.strong,{children:"Abstraction"})]}),"\n",(0,i.jsx)(e.p,{children:"Hiding complex implementation details and exposing only the necessary features."}),"\n",(0,i.jsx)(e.h4,{id:"example-7",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class ATM {\n  constructor(balance) {\n    this.balance = balance;\n  }\n\n  withdraw(amount) {\n    if (amount > this.balance) {\n      console.log('Insufficient funds');\n    } else {\n      this.balance -= amount;\n      console.log(`Withdrawn: ${amount}`);\n    }\n  }\n}\n\nconst atm = new ATM(1000);\natm.withdraw(500); // \"Withdrawn: 500\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"2-encapsulation",children:["2. ",(0,i.jsx)(e.strong,{children:"Encapsulation"})]}),"\n",(0,i.jsx)(e.p,{children:"Bundling data and methods that operate on the data, and restricting access to some of the object's components."}),"\n",(0,i.jsx)(e.h4,{id:"example-8",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class BankAccount {\n  constructor(balance) {\n    let _balance = balance; // Private variable\n\n    this.getBalance = function () {\n      return _balance;\n    };\n\n    this.deposit = function (amount) {\n      _balance += amount;\n    };\n  }\n}\n\nconst account = new BankAccount(1000);\naccount.deposit(500);\nconsole.log(account.getBalance()); // 1500\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"3-inheritance",children:["3. ",(0,i.jsx)(e.strong,{children:"Inheritance"})]}),"\n",(0,i.jsx)(e.p,{children:"Allowing a class to inherit properties and methods from another class."}),"\n",(0,i.jsx)(e.h4,{id:"example-9",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst dog = new Dog('Rex');\ndog.speak(); // \"Rex barks.\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h3,{id:"4-polymorphism",children:["4. ",(0,i.jsx)(e.strong,{children:"Polymorphism"})]}),"\n",(0,i.jsx)(e.p,{children:"The ability of objects to take on multiple forms. In JavaScript, this is achieved through method overriding."}),"\n",(0,i.jsx)(e.h4,{id:"example-10",children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Bird {\n  fly() {\n    console.log('Flying...');\n  }\n}\n\nclass Penguin extends Bird {\n  fly() {\n    console.log('Penguins cannot fly.');\n  }\n}\n\nconst bird = new Bird();\nbird.fly(); // \"Flying...\"\n\nconst penguin = new Penguin();\npenguin.fly(); // \"Penguins cannot fly.\"\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"additional-interesting-points",children:"Additional Interesting Points"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Prototypal Inheritance"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"JavaScript uses prototypal inheritance, where objects can inherit properties and methods from other objects."}),"\n",(0,i.jsx)(e.li,{children:"Unlike classical inheritance, there are no classes in prototypal inheritance (prior to ES6)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Mixins"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Mixins are a way to add properties and methods to objects without using inheritance."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const canEat = {\n  eat() {\n    console.log('Eating...');\n  }\n};\n\nconst canSleep = {\n  sleep() {\n    console.log('Sleeping...');\n  }\n};\n\nconst animal = Object.assign({}, canEat, canSleep);\nanimal.eat(); // \"Eating...\"\nanimal.sleep(); // \"Sleeping...\"\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Static Methods"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Static methods belong to the class itself rather than instances of the class."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class MathUtils {\n  static square(x) {\n    return x * x;\n  }\n}\n\nconsole.log(MathUtils.square(5)); // 25\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Private Fields (ES2022)"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["JavaScript now supports private fields in classes using the ",(0,i.jsx)(e.code,{children:"#"})," symbol."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Person {\n  #name;\n  constructor(name) {\n    this.#name = name;\n  }\n\n  getName() {\n    return this.#name;\n  }\n}\n\nconst person = new Person('Alice');\nconsole.log(person.getName()); // \"Alice\"\nconsole.log(person.#name); // Error: Private field\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"OOP in JavaScript"}),": Supported through prototypes and classes."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Objects"}),": Collections of key-value pairs with properties and methods."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"4 Pillars of OOP"}),": Abstraction, Encapsulation, Inheritance, and Polymorphism."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Practical Use"}),": OOP helps in writing modular, reusable, and maintainable code."]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>t});var a=s(6540);const i={},r=a.createContext(i);function l(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);