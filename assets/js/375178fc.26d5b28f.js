"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[983],{3342:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/DOM_Tree-57b00d71dc187b77f38370b84f1d1692.jpg"},5181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"JavaScript/DOM/DOM","title":"DOM - Document Object Model","description":"The Document Object Model (DOM) is the programming interface for web documents. It represents the structure of a document as a tree, enabling developers to interact with and manipulate content, structure, and styling dynamically.","source":"@site/docs/JavaScript/06_DOM/DOM.md","sourceDirName":"JavaScript/06_DOM","slug":"/JavaScript/DOM/DOM","permalink":"/knowledge-hub/docs/JavaScript/DOM/DOM","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/JavaScript/06_DOM/DOM.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Execution Context","permalink":"/knowledge-hub/docs/JavaScript/Basics/js_execution_context"},"next":{"title":"JavaScript Async Code Execution","permalink":"/knowledge-hub/docs/JavaScript/Events/asyncCodeExecution"}}');var l=n(4848),i=n(8453);const o={},r="DOM - Document Object Model",c={},d=[{value:"DOM Tree",id:"dom-tree",level:2},{value:"DOM Selectors, NodeList, and HTMLCollection",id:"dom-selectors-nodelist-and-htmlcollection",level:2},{value:"DOM Selectors",id:"dom-selectors",level:3},{value:"1. <strong>getElementById</strong>",id:"1-getelementbyid",level:4},{value:"2. <strong>textContent vs innerHTML vs innerText</strong>",id:"2-textcontent-vs-innerhtml-vs-innertext",level:4},{value:"3. <strong>querySelector</strong>",id:"3-queryselector",level:4},{value:"4. <strong>querySelectorAll</strong>",id:"4-queryselectorall",level:4},{value:"Example Code and Output",id:"example-code-and-output",level:3},{value:"Notes:",id:"notes",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"dom---document-object-model",children:"DOM - Document Object Model"})}),"\n",(0,l.jsx)(t.p,{children:"The Document Object Model (DOM) is the programming interface for web documents. It represents the structure of a document as a tree, enabling developers to interact with and manipulate content, structure, and styling dynamically."}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h2,{id:"dom-tree",children:"DOM Tree"}),"\n",(0,l.jsx)(t.p,{children:"The DOM is structured as a tree of nodes, with each element in the HTML represented as a node. Here is a visualization:"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"dom-tree",src:n(3342).A+"",width:"481",height:"531"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h2,{id:"dom-selectors-nodelist-and-htmlcollection",children:"DOM Selectors, NodeList, and HTMLCollection"}),"\n",(0,l.jsx)(t.p,{children:"The DOM API offers several methods to select elements, each with specific use cases and characteristics. Below, we detail these selectors and provide examples to clarify their usage."}),"\n",(0,l.jsx)(t.h3,{id:"dom-selectors",children:"DOM Selectors"}),"\n",(0,l.jsxs)(t.h4,{id:"1-getelementbyid",children:["1. ",(0,l.jsx)(t.strong,{children:"getElementById"})]}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"getElementById()"})," method retrieves an element by its unique ",(0,l.jsx)(t.code,{children:"id"}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-js",children:"// Example HTML: <h1 id='title' class='heading'>DOM Intro</h1>\n\nconst title = document.getElementById('title');\nconsole.log(title);\n// Output: <h1 id='title' class='heading'>DOM Intro</h1>\n\nconsole.log(title.id);\n// Output: title\n\nconsole.log(title.class);\n// Output: undefined\n\nconsole.log(title.className);\n// Output: heading\n\nconsole.log(title.getAttribute('id'));\n// Output: title\n\nconsole.log(title.getAttribute('class'));\n// Output: heading\n\ntitle.setAttribute('class', 'test');\nconsole.log(title);\n// Output: <h1 id='title' class='test'>DOM Intro</h1>\n\ntitle.style.padding = '1px';\n// Adds 1px padding to the title element.\n"})}),"\n",(0,l.jsxs)(t.h4,{id:"2-textcontent-vs-innerhtml-vs-innertext",children:["2. ",(0,l.jsx)(t.strong,{children:"textContent vs innerHTML vs innerText"})]}),"\n",(0,l.jsx)(t.p,{children:"These properties retrieve or modify the content of an element, but they behave differently."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-js",children:"const title = document.getElementById('title');\nconsole.log(title);\n// Output: <h1 id='title' class='heading'>DOM Intro <span style=\"display:none\">Test</span></h1>\n\nconsole.log(title.textContent);\n// Output: 'DOM Intro Test'\n\nconsole.log(title.innerText);\n// Output: 'DOM Intro'\n\nconsole.log(title.innerHTML);\n// Output: 'DOM Intro <span style=\"display:none\">Test</span>'\n"})}),"\n",(0,l.jsxs)(t.h4,{id:"3-queryselector",children:["3. ",(0,l.jsx)(t.strong,{children:"querySelector"})]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"querySelector()"})," selects the first element that matches a CSS selector. If no matches are found, it returns ",(0,l.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,l.jsxs)(t.h4,{id:"4-queryselectorall",children:["4. ",(0,l.jsx)(t.strong,{children:"querySelectorAll"})]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"querySelectorAll()"})," retrieves all matching elements as a static ",(0,l.jsx)(t.code,{children:"NodeList"}),". This list is not live and does not reflect changes made to the DOM after the selection."]}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"example-code-and-output",children:"Example Code and Output"}),"\n",(0,l.jsx)(t.p,{children:"Consider the following HTML:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-html",children:'<div>\n  <h1 id="title" class="heading">\n    DOM learning<span style="display: none;">test text</span>\n  </h1>\n  <h2>Lorem ipsum dolor sit.</h2>\n  <h2>Lorem ipsum dolor sit.</h2>\n  <h2>Lorem ipsum dolor sit.</h2>\n  <p>Lorem ipsum dolor sit amet.</p>\n  <input type="password" name="" id="" />\n\n  <ul>\n    <li class="list-item">one</li>\n    <li class="list-item">two</li>\n    <li class="list-item">three</li>\n    <li class="list-item">four</li>\n  </ul>\n</div>\n'})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-js",children:"// Selecting the first <h2> element.\nconsole.log(document.querySelector('h2'));\n// Output: <h2>Lorem ipsum dolor sit.</h2>\n\n// Selecting elements by ID and class.\nconsole.log(document.querySelector('#title'));\n// Output: <h1 id=\"title\" class=\"heading\">...</h1>\nconsole.log(document.querySelector('.heading'));\n// Output: <h1 id=\"title\" class=\"heading\">...</h1>\n\n// Selecting an <input> element with a specific attribute.\nconsole.log(document.querySelector('input[type=\"password\"]'));\n// Output: <input type=\"password\" name=\"\" id=\"\" />\n\n// Manipulating an <li> element.\nconst turnGreen = document.querySelector('li');\nturnGreen.style.backgroundColor = 'green';\nturnGreen.innerText = 'three green';\n\n// Working with NodeList (static).\nconst tempLiList = document.querySelectorAll('li');\nconsole.log(tempLiList);\n// Output: NodeList(4) [li, li, li, li]\n\n// Updating styles for NodeList items.\ntempLiList.forEach((li) => (li.style.backgroundColor = 'red'));\n\n// Working with HTMLCollection (live).\nconst tempClassList = document.getElementsByClassName('list-item');\nconsole.log(tempClassList);\n// Output: HTMLCollection(4) [li.list-item, li.list-item, li.list-item, li.list-item]\n\n// Converting HTMLCollection to an array.\nconst myConvertedArray = Array.from(tempClassList);\nmyConvertedArray.forEach((li) => (li.style.color = 'orange'));\n"})}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.h3,{id:"notes",children:"Notes:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Static vs Live Collections"}),": ",(0,l.jsx)(t.code,{children:"querySelectorAll()"})," returns a static NodeList, while ",(0,l.jsx)(t.code,{children:"getElementsByClassName"})," returns a live HTMLCollection that reflects changes in the DOM."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Array Methods Compatibility"}),": NodeList supports ",(0,l.jsx)(t.code,{children:"forEach()"}),", but HTMLCollection does not. Convert HTMLCollection to an array for using methods like ",(0,l.jsx)(t.code,{children:"map"})," or ",(0,l.jsx)(t.code,{children:"forEach"}),"."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Performance Considerations"}),": Use ",(0,l.jsx)(t.code,{children:"querySelector"})," and ",(0,l.jsx)(t.code,{children:"querySelectorAll"})," for flexibility and modern syntax, but prefer ",(0,l.jsx)(t.code,{children:"getElementById"})," for faster, unique ID-based selection."]}),"\n"]}),"\n",(0,l.jsx)(t.hr,{}),"\n",(0,l.jsx)(t.p,{children:"By understanding these selectors and methods, you can efficiently traverse and manipulate the DOM to create dynamic and interactive web applications."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const l={},i=s.createContext(l);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);