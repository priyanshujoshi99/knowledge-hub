"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[488],{8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),t.createElement(i.Provider,{value:e},n.children)}},8731:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"DSA/Arrays/Logic Building/IntersectionOfTwoSortedArrays","title":"Intersection of two sorted arrays","description":"Problem","source":"@site/docs/DSA/4. Arrays/2. Logic Building/IntersectionOfTwoSortedArrays.md","sourceDirName":"DSA/4. Arrays/2. Logic Building","slug":"/DSA/Arrays/Logic Building/IntersectionOfTwoSortedArrays","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/IntersectionOfTwoSortedArrays","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/DSA/4. Arrays/2. Logic Building/IntersectionOfTwoSortedArrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Find missing number","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/FindMissingNumber"},"next":{"title":"Move Zeros to End","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/MoveZerosToEnd"}}');var s=r(4848),i=r(8453);const o={},a="Intersection of two sorted arrays",l={},u=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"intersection-of-two-sorted-arrays",children:"Intersection of two sorted arrays"})}),"\n",(0,s.jsx)(e.h2,{id:"problem",children:"Problem"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Given two sorted arrays nums1 and nums2, return an array containing the intersection of these two arrays."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"The intersection of two arrays is an array where all values are present in both arrays."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: nums1 = [1, 2, 2, 3, 5], nums2 = [1, 2, 7]\n\nOutput: [1, 2]\n\nExplanation: The elements 1, 2 are the only elements present in both nums1 and nums2\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: nums1 = [1, 2, 2, 3], nums2 = [4, 5, 7]\n\nOutput: []\n\nExplanation: No elements appear in both nums1 and nums2\n"})}),"\n",(0,s.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public int[] intersectionArray(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        int[] result = new int[1000];\n\n        // Count occurrences of each element in nums1\n        for (int num : nums1) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Check nums2 and track intersection\n        for (int i=0; i < nums2.length; i++) {\n            if (freqMap.containsKey(nums2[i]) && freqMap.get(nums2[i]) > 0) {\n                result[i] = nums2[i];\n                freqMap.put(num, freqMap.get(nums2[i]) - 1);  // Decrement count\n            }\n        }\n\n        return result;\n    }\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);