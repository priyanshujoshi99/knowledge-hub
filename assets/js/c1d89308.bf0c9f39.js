"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[7703],{5155:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"JavaScript/Basics/stackAndHeap","title":"Notes on Stack vs Heap Memory","description":"Memory Allocation for Data Types","source":"@site/docs/JavaScript/01_Basics/09_stackAndHeap.md","sourceDirName":"JavaScript/01_Basics","slug":"/JavaScript/Basics/stackAndHeap","permalink":"/knowledge-hub/docs/JavaScript/Basics/stackAndHeap","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/JavaScript/01_Basics/09_stackAndHeap.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript","permalink":"/knowledge-hub/docs/category/javascript"},"next":{"title":"JavaScript Execution Context","permalink":"/knowledge-hub/docs/JavaScript/Basics/js_execution_context"}}');var t=s(4848),i=s(8453);const o={},c="Notes on Stack vs Heap Memory",a={},l=[{value:"Memory Allocation for Data Types",id:"memory-allocation-for-data-types",level:2},{value:"Stack Memory",id:"stack-memory",level:3},{value:"Heap Memory",id:"heap-memory",level:3},{value:"Key Differences",id:"key-differences",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"notes-on-stack-vs-heap-memory",children:"Notes on Stack vs Heap Memory"})}),"\n",(0,t.jsx)(n.h2,{id:"memory-allocation-for-data-types",children:"Memory Allocation for Data Types"}),"\n",(0,t.jsx)(n.h3,{id:"stack-memory",children:"Stack Memory"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Used for storing ",(0,t.jsx)(n.strong,{children:"primitive data types"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Variables get a ",(0,t.jsx)(n.strong,{children:"copy"})," of the value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"let hero = 'Batman';\nlet friend = hero;\n// `friend` gets a copy of the value of `hero`, not a reference.\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"heap-memory",children:"Heap Memory"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Used for storing ",(0,t.jsx)(n.strong,{children:"non-primitive data types"})," (e.g., objects, arrays)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Variables store a ",(0,t.jsx)(n.strong,{children:"reference"})," to the object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example"}),":","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"let student = { name: 'Batman' };\nlet tutor = student;\n// `tutor` gets a reference to `student`. Changing properties of `tutor` will also affect `student`.\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Stack Memory"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fast access."}),"\n",(0,t.jsxs)(n.li,{children:["Stores primitive types like ",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"number"}),", ",(0,t.jsx)(n.code,{children:"boolean"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ",(0,t.jsx)(n.code,{children:"undefined"}),", ",(0,t.jsx)(n.code,{children:"symbol"}),", ",(0,t.jsx)(n.code,{children:"bigint"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Each variable operates independently with its own copy of data."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Heap Memory"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Slower access compared to stack."}),"\n",(0,t.jsxs)(n.li,{children:["Stores non-primitive types like ",(0,t.jsx)(n.code,{children:"objects"}),", ",(0,t.jsx)(n.code,{children:"arrays"}),", ",(0,t.jsx)(n.code,{children:"functions"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Variables share references to the same memory location."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);