"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[9295],{626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"DSA/Arrays/Fundamentals/LeftRotateArrayByKPlaces","title":"Left Rotate Array by K Places","description":"Problem","source":"@site/docs/DSA/4. Arrays/1. Fundamentals/LeftRotateArrayByKPlaces.md","sourceDirName":"DSA/4. Arrays/1. Fundamentals","slug":"/DSA/Arrays/Fundamentals/LeftRotateArrayByKPlaces","permalink":"/knowledge-hub/docs/DSA/Arrays/Fundamentals/LeftRotateArrayByKPlaces","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/4. Arrays/1. Fundamentals/LeftRotateArrayByKPlaces.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sorting Algorithms","permalink":"/knowledge-hub/docs/DSA/Sorting/Sorting"},"next":{"title":"Second Largest Element","permalink":"/knowledge-hub/docs/DSA/Arrays/Fundamentals/SecondLargestElement"}}');var a=n(4848),s=n(8453);const o={},l="Left Rotate Array by K Places",i={},c=[{value:"Problem",id:"problem",level:2},{value:"Examples:",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"left-rotate-array-by-k-places",children:"Left Rotate Array by K Places"})}),"\n",(0,a.jsx)(t.h2,{id:"problem",children:"Problem"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Given an integer array nums and a non-negative integer k, rotate the array to the left by k steps."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"examples",children:"Examples:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Input: nums = [1, 2, 3, 4, 5, 6], k = 2\n\nOutput: nums = [3, 4, 5, 6, 1, 2]\n\nExplanation: rotate 1 step to the left: [2, 3, 4, 5, 6, 1]\nrotate 2 steps to the left: [3, 4, 5, 6, 1, 2]\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Input: nums = [3, 4, 1, 5, 3, -5], k = 8\n\nOutput: nums = [1, 5, 3, -5, 3, 4]\n\nExplanation: rotate 1 step to the left: [4, 1, 5, 3, -5, 3]\nrotate 2 steps to the left: [1, 5, 3, -5, 3, 4]\nrotate 3 steps to the left: [5, 3, -5, 3, 4, 1]\nrotate 4 steps to the left: [3, -5, 3, 4, 1, 5]\nrotate 5 steps to the left: [-5, 3, 4, 1, 5, 3]\nrotate 6 steps to the left: [3, 4, 1, 5, 3, -5]\nrotate 7 steps to the left: [4, 1, 5, 3, -5, 3]\nrotate 8 steps to the left: [1, 5, 3, -5, 3, 4]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"class Solution {\n  public void rotateArray(int[] nums, int k) {\n    int n = nums.length;\n    k = k % n; // Handle cases where k > n\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, n - 1);\n    reverse(nums, 0, n - 1);\n  }\n\n  private void reverse(int[] arr, int start, int end) {\n    while (start < end) {\n      int temp = arr[start];\n      arr[start] = arr[end];\n      arr[end] = temp;\n      start++;\n      end--;\n    }\n  }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(6540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);