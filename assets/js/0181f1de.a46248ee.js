"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[6969],{8413:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"JavaScript/Events/asyncCodeExecution","title":"JavaScript Async Code Execution","description":"JavaScript, being single-threaded, executes code synchronously by default. However, asynchronous mechanisms enable it to handle time-consuming tasks like fetching data or timers without blocking the main thread. This makes it efficient for building responsive web applications.","source":"@site/docs/JavaScript/08_Events/asyncCodeExecution.md","sourceDirName":"JavaScript/08_Events","slug":"/JavaScript/Events/asyncCodeExecution","permalink":"/knowledge-hub/docs/JavaScript/Events/asyncCodeExecution","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/08_Events/asyncCodeExecution.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DOM - Document Object Model","permalink":"/knowledge-hub/docs/JavaScript/DOM/DOM"},"next":{"title":"Lexical Scoping and Closures in JavaScript","permalink":"/knowledge-hub/docs/JavaScript/Advance/LexicalScopingClosure"}}');var i=s(4848),t=s(8453);const c={},l="JavaScript Async Code Execution",a={},r=[{value:"Execution Flow: The Call Stack, Web APIs, and Event Loop",id:"execution-flow-the-call-stack-web-apis-and-event-loop",level:2},{value:"1. <strong>Call Stack</strong>",id:"1-call-stack",level:3},{value:"2. <strong>Web APIs</strong>",id:"2-web-apis",level:3},{value:"3. <strong>Task Queue</strong> and <strong>Microtask Queue</strong>",id:"3-task-queue-and-microtask-queue",level:3},{value:"4. <strong>Event Loop</strong>",id:"4-event-loop",level:3},{value:"Code Flow Example with Diagram",id:"code-flow-example-with-diagram",level:2},{value:"Code Example",id:"code-example",level:3},{value:"Diagram",id:"diagram",level:3},{value:"Execution Breakdown",id:"execution-breakdown",level:3},{value:"Real-World Applications",id:"real-world-applications",level:2},{value:"Fetching Data",id:"fetching-data",level:3},{value:"Debouncing User Input",id:"debouncing-user-input",level:3},{value:"Key Notes",id:"key-notes",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript-async-code-execution",children:"JavaScript Async Code Execution"})}),"\n",(0,i.jsx)(n.p,{children:"JavaScript, being single-threaded, executes code synchronously by default. However, asynchronous mechanisms enable it to handle time-consuming tasks like fetching data or timers without blocking the main thread. This makes it efficient for building responsive web applications."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"execution-flow-the-call-stack-web-apis-and-event-loop",children:"Execution Flow: The Call Stack, Web APIs, and Event Loop"}),"\n",(0,i.jsxs)(n.p,{children:["JavaScript uses the ",(0,i.jsx)(n.strong,{children:"Call Stack"}),", ",(0,i.jsx)(n.strong,{children:"Web APIs"}),", and ",(0,i.jsx)(n.strong,{children:"Event Loop"})," to manage async operations. Here's how they work together:"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-call-stack",children:["1. ",(0,i.jsx)(n.strong,{children:"Call Stack"})]}),"\n",(0,i.jsx)(n.p,{children:"A stack data structure where function calls are added and removed in a last-in, first-out (LIFO) manner. Only one task can execute at a time."}),"\n",(0,i.jsxs)(n.h3,{id:"2-web-apis",children:["2. ",(0,i.jsx)(n.strong,{children:"Web APIs"})]}),"\n",(0,i.jsxs)(n.p,{children:["Browser-provided APIs like ",(0,i.jsx)(n.code,{children:"setTimeout"}),", ",(0,i.jsx)(n.code,{children:"fetch"}),", or DOM events allow JavaScript to offload tasks. These APIs run in the background and return results to the ",(0,i.jsx)(n.strong,{children:"Task Queue"})," or ",(0,i.jsx)(n.strong,{children:"Microtask Queue"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"3-task-queue-and-microtask-queue",children:["3. ",(0,i.jsx)(n.strong,{children:"Task Queue"})," and ",(0,i.jsx)(n.strong,{children:"Microtask Queue"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Microtask Queue"}),": Includes promises (",(0,i.jsx)(n.code,{children:".then"}),", ",(0,i.jsx)(n.code,{children:"catch"}),", ",(0,i.jsx)(n.code,{children:"finally"}),") and ",(0,i.jsx)(n.code,{children:"queueMicrotask"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Task Queue"}),": Includes callbacks like ",(0,i.jsx)(n.code,{children:"setTimeout"})," and ",(0,i.jsx)(n.code,{children:"setInterval"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"4-event-loop",children:["4. ",(0,i.jsx)(n.strong,{children:"Event Loop"})]}),"\n",(0,i.jsx)(n.p,{children:"The Event Loop ensures the Call Stack is empty before moving tasks from the queues. Microtasks have higher priority and are processed before tasks."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"code-flow-example-with-diagram",children:"Code Flow Example with Diagram"}),"\n",(0,i.jsx)(n.h3,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"console.log('Start');\n\nsetTimeout(() => console.log('Timeout 1'), 0);\n\nPromise.resolve()\n  .then(() => console.log('Promise 1'))\n  .then(() => console.log('Promise 2'));\n\nsetTimeout(() => console.log('Timeout 2'), 0);\n\nconsole.log('End');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"diagram",children:"Diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'1. "Start" logged (Call Stack -> Console API -> Browser logs).\n2. setTimeout pushed to Web APIs (Executes later).\n3. Promise resolved -> .then() callback added to Microtask Queue.\n4. "End" logged (Call Stack -> Console API -> Browser logs).\n5. Event Loop executes Microtasks (Promise callbacks first):\n   - "Promise 1" -> Console.\n   - "Promise 2" -> Console.\n6. Event Loop executes Tasks from Task Queue:\n   - "Timeout 1" -> Console.\n   - "Timeout 2" -> Console.\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"execution-breakdown",children:"Execution Breakdown"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Start\nEnd\nPromise 1\nPromise 2\nTimeout 1\nTimeout 2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why?"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"console.log('Start')"})," executes immediately."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setTimeout"})," schedules ",(0,i.jsx)(n.code,{children:"Timeout 1"})," and ",(0,i.jsx)(n.code,{children:"Timeout 2"})," for the Task Queue."]}),"\n",(0,i.jsxs)(n.li,{children:["Promise resolves, and ",(0,i.jsx)(n.code,{children:".then"})," callbacks (",(0,i.jsx)(n.code,{children:"Promise 1"})," and ",(0,i.jsx)(n.code,{children:"Promise 2"}),") are added to the Microtask Queue."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"console.log('End')"})," executes."]}),"\n",(0,i.jsx)(n.li,{children:"Event Loop processes Microtasks first (Promises) before Task Queue (Timeouts)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"real-world-applications",children:"Real-World Applications"}),"\n",(0,i.jsx)(n.h3,{id:"fetching-data",children:"Fetching Data"}),"\n",(0,i.jsx)(n.p,{children:"Using async/await makes async code look synchronous:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"async function fetchData() {\n  console.log('Fetching data...');\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log('Data received:', data);\n}\nfetchData();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debouncing-user-input",children:"Debouncing User Input"}),"\n",(0,i.jsx)(n.p,{children:"Avoiding unnecessary API calls during rapid user input:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"let debounceTimeout;\nfunction handleInputChange(event) {\n  clearTimeout(debounceTimeout);\n  debounceTimeout = setTimeout(() => {\n    console.log('Input processed:', event.target.value);\n  }, 300);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-notes",children:"Key Notes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Blocking vs Non-Blocking:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Blocking code halts further execution until completed (e.g., loops)."}),"\n",(0,i.jsx)(n.li,{children:"Non-blocking code schedules tasks to avoid halting execution."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Microtasks Priority:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Promises (",(0,i.jsx)(n.code,{children:".then"}),", ",(0,i.jsx)(n.code,{children:"catch"}),") execute before tasks like ",(0,i.jsx)(n.code,{children:"setTimeout"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common Pitfalls:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Overusing async/await can reduce readability."}),"\n",(0,i.jsx)(n.li,{children:'Nested callbacks ("Callback Hell") can be avoided with Promises or async/await.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Understanding the async execution model in JavaScript empowers developers to write efficient, non-blocking code. By mastering the Call Stack, Event Loop, and various queues, you can create smooth, responsive applications."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var o=s(6540);const i={},t=o.createContext(i);function c(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);