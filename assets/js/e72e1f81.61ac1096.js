"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[9380],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}},9902:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"JavaScript/Basics/js_execution_context","title":"JavaScript Execution Context","description":"JavaScript isn\'t a language that just executes code line by line. The way JavaScript organizes and processes code involves some clever mechanisms like Execution Context and Call Stack, and understanding them is key to mastering JavaScript. Let\u2019s dive deep into these concepts and break them down in a way that\u2019s both insightful and easy to grasp!","source":"@site/docs/JavaScript/03_Basics/06_js_execution_context.md","sourceDirName":"JavaScript/03_Basics","slug":"/JavaScript/Basics/js_execution_context","permalink":"/knowledge-hub/docs/JavaScript/Basics/js_execution_context","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/JavaScript/03_Basics/06_js_execution_context.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Notes on Stack vs Heap Memory","permalink":"/knowledge-hub/docs/JavaScript/Basics/stackAndHeap"},"next":{"title":"DOM - Document Object Model","permalink":"/knowledge-hub/docs/JavaScript/DOM/DOM"}}');var i=s(4848),c=s(8453);const r={},o="JavaScript Execution Context",l={},a=[{value:"\ud83d\udcdc <strong>Global Execution Context</strong>",id:"-global-execution-context",level:2},{value:"\ud83c\udfe0 <strong>Function Execution Context</strong>",id:"-function-execution-context",level:2},{value:"\ud83e\udde0 <strong>Memory Creation Phase</strong>",id:"-memory-creation-phase",level:2},{value:"\ud83d\ude80 <strong>Execution Phase</strong>",id:"-execution-phase",level:2},{value:"How JavaScript Code Is Executed: A Step-by-Step Breakdown",id:"how-javascript-code-is-executed-a-step-by-step-breakdown",level:2},{value:"<strong>Step 1: Global Execution Context</strong>",id:"step-1-global-execution-context",level:3},{value:"<strong>Step 2: Memory Creation Phase</strong>",id:"step-2-memory-creation-phase",level:3},{value:"<strong>Step 3: Execution Phase</strong>",id:"step-3-execution-phase",level:3},{value:"<strong>Step 4: Another Function Call</strong>",id:"step-4-another-function-call",level:3},{value:"\ud83c\udfd7\ufe0f <strong>JavaScript Call Stack</strong>",id:"\ufe0f-javascript-call-stack",level:2},{value:"<strong>Call Stack Steps</strong>",id:"call-stack-steps",level:3},{value:"\ud83d\udd11 <strong>Key Takeaways</strong>",id:"-key-takeaways",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript-execution-context",children:"JavaScript Execution Context"})}),"\n",(0,i.jsxs)(n.p,{children:["JavaScript isn't a language that just executes code line by line. The way JavaScript organizes and processes code involves some clever mechanisms like ",(0,i.jsx)(n.strong,{children:"Execution Context"})," and ",(0,i.jsx)(n.strong,{children:"Call Stack"}),", and understanding them is key to mastering JavaScript. Let\u2019s dive deep into these concepts and break them down in a way that\u2019s both insightful and easy to grasp!"]}),"\n",(0,i.jsxs)(n.h2,{id:"-global-execution-context",children:["\ud83d\udcdc ",(0,i.jsx)(n.strong,{children:"Global Execution Context"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Global Execution Context (GEC)"}),' is created when the JavaScript script begins to run. It serves as the foundation or "home base" for everything in your program. It\'s the first context that gets pushed onto the ',(0,i.jsx)(n.strong,{children:"Call Stack"}),", and it represents the global scope in JavaScript."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What\u2019s inside the Global Context?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Variables and functions are defined globally, meaning they can be accessed throughout the entire program."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"this"})," keyword refers to the ",(0,i.jsx)(n.strong,{children:"global object"})," (e.g., ",(0,i.jsx)(n.code,{children:"window"})," in browsers or ",(0,i.jsx)(n.code,{children:"global"})," in Node.js)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Think of the ",(0,i.jsx)(n.strong,{children:"Global Execution Context"})," as the starting point \u2014 the context from which all the other parts of your code execute."]}),"\n",(0,i.jsxs)(n.h2,{id:"-function-execution-context",children:["\ud83c\udfe0 ",(0,i.jsx)(n.strong,{children:"Function Execution Context"})]}),"\n",(0,i.jsxs)(n.p,{children:["Every time a function is called, a new ",(0,i.jsx)(n.strong,{children:"Function Execution Context (FEC)"})," is created. This context defines the local scope of the function where variables and parameters are declared."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What\u2019s inside a Function Execution Context?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["It contains ",(0,i.jsx)(n.strong,{children:"function arguments"}),", ",(0,i.jsx)(n.strong,{children:"local variables"}),", and the function\u2019s ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"this"})})," context (which depends on how the function is called)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This context is ephemeral \u2014 it gets created when the function is invoked, and once the function finishes execution, the context is popped off the stack."}),"\n",(0,i.jsxs)(n.h2,{id:"-memory-creation-phase",children:["\ud83e\udde0 ",(0,i.jsx)(n.strong,{children:"Memory Creation Phase"})]}),"\n",(0,i.jsxs)(n.p,{children:["Before code begins executing, the ",(0,i.jsx)(n.strong,{children:"Memory Creation Phase"}),' sets up the environment. This is where JavaScript "prepares" the code to be run.']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What happens in the Memory Phase?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Variable Object (VO)"}),": This is a map of all the variables and functions in the current scope. It includes function parameters, function declarations, and variable declarations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scope Chain"}),": A list of all variable objects accessible in the current scope. It helps JavaScript resolve variable references."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["The ",(0,i.jsx)(n.code,{children:"this"})," keyword"]}),": The ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"this"})})," keyword is set based on the scope in which the function is called. In the global context, ",(0,i.jsx)(n.code,{children:"this"})," refers to the global object."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"-execution-phase",children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Execution Phase"})]}),"\n",(0,i.jsxs)(n.p,{children:["After the setup, the ",(0,i.jsx)(n.strong,{children:"Execution Phase"})," is where JavaScript actually starts executing the code. During this phase, the JavaScript engine:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Assigns values to variables"}),".","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"var"}),"-declared variables are ",(0,i.jsx)(n.strong,{children:"hoisted"})," with ",(0,i.jsx)(n.code,{children:"undefined"})," as their initial value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," variables are also ",(0,i.jsx)(n.strong,{children:"hoisted"}),", but they remain uninitialized until the point they are declared."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manages the Call Stack"}),": Each function call creates a new ",(0,i.jsx)(n.strong,{children:"execution context"})," that is added to the top of the stack. Once a function returns, its execution context is popped off the stack."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-javascript-code-is-executed-a-step-by-step-breakdown",children:"How JavaScript Code Is Executed: A Step-by-Step Breakdown"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s explore how JavaScript processes code using the following example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"let val1 = 10;\nlet val2 = 5;\n\nfunction addNum(num1, num2) {\n  let total = num1 + num2;\n  return total;\n}\n\nlet result1 = addNum(val1, val2);\nlet result2 = addNum(10, 2);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1-global-execution-context",children:(0,i.jsx)(n.strong,{children:"Step 1: Global Execution Context"})}),"\n",(0,i.jsxs)(n.p,{children:["At the beginning, the ",(0,i.jsx)(n.strong,{children:"Global Execution Context"})," is created, where all global variables and functions are initialized."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What happens?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Variables ",(0,i.jsx)(n.code,{children:"val1"}),", ",(0,i.jsx)(n.code,{children:"val2"}),", and ",(0,i.jsx)(n.code,{children:"addNum"})," are hoisted but not initialized yet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-2-memory-creation-phase",children:(0,i.jsx)(n.strong,{children:"Step 2: Memory Creation Phase"})}),"\n",(0,i.jsxs)(n.p,{children:["At this stage, the JavaScript engine sets up the ",(0,i.jsx)(n.strong,{children:"Variable Object (VO)"})," for the global context:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"val1 -> undefined\nval2 -> undefined\naddNum -> function definition\nresult1 -> undefined\nresult2 -> undefined\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-execution-phase",children:(0,i.jsx)(n.strong,{children:"Step 3: Execution Phase"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Assign values"})," to global variables:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"val1"})," is assigned 10, and ",(0,i.jsx)(n.code,{children:"val2"})," is assigned 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Function Call"}),": ",(0,i.jsx)(n.code,{children:"addNum(val1, val2)"})," creates a new ",(0,i.jsx)(n.strong,{children:"execution context"})," for ",(0,i.jsx)(n.code,{children:"addNum"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Memory Phase for ",(0,i.jsx)(n.code,{children:"addNum"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"num1 -> undefined\nnum2 -> undefined\ntotal -> undefined\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Execution Phase for ",(0,i.jsx)(n.code,{children:"addNum"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"num1 <- 10\nnum2 <- 5\ntotal <- 15\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Return value"}),": The function returns ",(0,i.jsx)(n.code,{children:"15"}),", which is assigned to ",(0,i.jsx)(n.code,{children:"result1"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-4-another-function-call",children:(0,i.jsx)(n.strong,{children:"Step 4: Another Function Call"})}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"addNum(10, 2)"})," is called, ",(0,i.jsx)(n.strong,{children:"a new execution context"})," for ",(0,i.jsx)(n.code,{children:"addNum"})," is created."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory Phase for second call"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"num1 -> undefined\nnum2 -> undefined\ntotal -> undefined\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Execution Phase"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"num1 <- 10\nnum2 <- 2\ntotal <- 12\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"\ufe0f-javascript-call-stack",children:["\ud83c\udfd7\ufe0f ",(0,i.jsx)(n.strong,{children:"JavaScript Call Stack"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Call Stack"})," is a crucial part of JavaScript\u2019s execution model. It\u2019s a stack data structure that keeps track of function calls. When a function is called, its execution context is pushed onto the stack, and when it finishes, it is popped off."]}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s visualize the call stack with an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function one() {\n  console.log('one');\n  two();\n}\n\nfunction two() {\n  console.log('two');\n  three();\n}\n\nfunction three() {\n  console.log('three');\n}\n\none();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"call-stack-steps",children:(0,i.jsx)(n.strong,{children:"Call Stack Steps"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Call Stack is empty"})," initially."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"one()"})," is called"]}),": The execution context for ",(0,i.jsx)(n.code,{children:"one"})," is pushed onto the stack."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| one  |\n|______|\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"two()"})," is called from ",(0,i.jsx)(n.code,{children:"one"})]}),": The execution context for ",(0,i.jsx)(n.code,{children:"two"})," is added to the stack."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| two  |\n|______|\n| one  |\n|______|\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"three()"})," is called from ",(0,i.jsx)(n.code,{children:"two"})]}),": The execution context for ",(0,i.jsx)(n.code,{children:"three"})," is pushed onto the stack."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| three|\n|______|\n| two  |\n|______|\n| one  |\n|______|\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Once ",(0,i.jsx)(n.code,{children:"three()"})," finishes, it\u2019s popped off the stack:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| two  |\n|______|\n| one  |\n|______|\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After ",(0,i.jsx)(n.code,{children:"two()"})," finishes, it\u2019s popped off the stack:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| one  |\n|______|\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Finally, once ",(0,i.jsx)(n.code,{children:"one()"})," finishes, the stack is empty again:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"|      |\n|______|\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-key-takeaways",children:["\ud83d\udd11 ",(0,i.jsx)(n.strong,{children:"Key Takeaways"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Execution Context"}),": This is where JavaScript variables and functions live and execute. It encompasses both the ",(0,i.jsx)(n.strong,{children:"Global Execution Context"}),' (the "home base") and ',(0,i.jsx)(n.strong,{children:"Function Execution Contexts"})," (where functions execute locally)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Call Stack"}),': It\u2019s the "manager" of function calls, following a Last In First Out (LIFO) principle. Each function call gets its execution context, and once done, it\u2019s removed from the stack.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory and Execution Phases"}),": Before code executes, the environment is set up in the ",(0,i.jsx)(n.strong,{children:"Memory Phase"}),", followed by the ",(0,i.jsx)(n.strong,{children:"Execution Phase"}),", where actual code execution happens line by line."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);