"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[645],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},9563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"DSA/Arrays/FAQs - Medium/2Sum","title":"2 Sum","description":"Problem","source":"@site/docs/DSA/4. Arrays/3. FAQs - Medium/2Sum.md","sourceDirName":"DSA/4. Arrays/3. FAQs - Medium","slug":"/DSA/Arrays/FAQs - Medium/2Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/2Sum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/4. Arrays/3. FAQs - Medium/2Sum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Union of two sorted arrays","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/UnionOfTwoSortedArrays"},"next":{"title":"3 Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/3Sum"}}');var s=t(4848),i=t(8453);const o={},a="2 Sum",u={},d=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"2-sum",children:"2 Sum"})}),"\n",(0,s.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,s.jsx)(n.p,{children:"Given an array of integers nums and an integer target. Return the indices(0 - indexed) of two elements in nums such that they add up to target."}),"\n",(0,s.jsx)(n.p,{children:"Each input will have exactly one solution, and the same element cannot be used twice. Return the answer in non-decreasing order."}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1, 6, 2, 10, 3], target = 7\n\nOutput: [0, 1]\n\nExplanation: nums[0] + nums[1] = 1 + 6 = 7\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1, 3, 5, -7, 6, -3], target = 0\n\nOutput: [1, 5]\n\nExplanation: nums[1] + nums[5] = 3 + (-3) = 0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n  public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> mp = new HashMap<>();\n\n    for (int i = 0; i < nums.length; i++) {\n      int complement = target - nums[i];\n\n      // If the complement exists in the map, return its index and the current index\n      if (mp.containsKey(complement)) {\n        return new int[]{mp.get(complement), i};\n      }\n\n      // Store the current number and its index in the map\n      mp.put(nums[i], i);\n    }\n\n    // Return empty array if no solution found (should never happen in a valid case)\n    return new int[]{-1, -1};\n  }\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);