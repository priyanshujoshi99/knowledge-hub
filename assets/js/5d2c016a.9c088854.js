"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[507],{3791:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"DSA/Basics/BasicMath","title":"Basic Math","description":"Count Digits of a Number","source":"@site/docs/DSA/2. Basics/BasicMath.md","sourceDirName":"DSA/2. Basics","slug":"/DSA/Basics/BasicMath","permalink":"/knowledge-hub/docs/DSA/Basics/BasicMath","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/2. Basics/BasicMath.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basic Hashing","permalink":"/knowledge-hub/docs/DSA/Basics/BasicHashing"},"next":{"title":"Basic Recursion","permalink":"/knowledge-hub/docs/DSA/Basics/BasicRecursion"}}');var s=i(4848),t=i(8453);const c={},o="Basic Math",r={},a=[{value:"Count Digits of a Number",id:"count-digits-of-a-number",level:2},{value:"Brute Force Approach",id:"brute-force-approach",level:3},{value:"Notes",id:"notes",level:4},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4},{value:"Optimized Approach",id:"optimized-approach",level:3},{value:"Notes",id:"notes-1",level:4},{value:"Time Complexity",id:"time-complexity-1",level:4},{value:"Space Complexity",id:"space-complexity-1",level:4},{value:"Reversing a Number",id:"reversing-a-number",level:2},{value:"Notes",id:"notes-2",level:4},{value:"Time Complexity",id:"time-complexity-2",level:4},{value:"Space Complexity",id:"space-complexity-2",level:4},{value:"Count Total Number of Divisors",id:"count-total-number-of-divisors",level:2},{value:"Brute Force Approach",id:"brute-force-approach-1",level:3},{value:"Notes",id:"notes-3",level:4},{value:"Time Complexity",id:"time-complexity-3",level:4},{value:"Space Complexity",id:"space-complexity-3",level:4},{value:"Optimized Approach",id:"optimized-approach-1",level:3},{value:"Notes",id:"notes-4",level:4},{value:"Time Complexity",id:"time-complexity-4",level:4},{value:"Space Complexity",id:"space-complexity-4",level:4},{value:"Greatest Common Divisor (GCD)",id:"greatest-common-divisor-gcd",level:2},{value:"Brute Force Approach",id:"brute-force-approach-2",level:3},{value:"Notes",id:"notes-5",level:4},{value:"Time Complexity",id:"time-complexity-5",level:4},{value:"Space Complexity",id:"space-complexity-5",level:4},{value:"Optimized Approach",id:"optimized-approach-2",level:3},{value:"Notes",id:"notes-6",level:4},{value:"Time Complexity",id:"time-complexity-6",level:4},{value:"Space Complexity",id:"space-complexity-6",level:4},{value:"Optimized Approach Using Euclidean Algorithm",id:"optimized-approach-using-euclidean-algorithm",level:3},{value:"Notes",id:"notes-7",level:4},{value:"Time Complexity",id:"time-complexity-7",level:4},{value:"Space Complexity",id:"space-complexity-7",level:4},{value:"Optimized Approach Using Euclidean Algorithm With Modulo",id:"optimized-approach-using-euclidean-algorithm-with-modulo",level:3},{value:"Notes",id:"notes-8",level:4},{value:"Time Complexity",id:"time-complexity-8",level:4},{value:"Space Complexity",id:"space-complexity-8",level:4},{value:"Lowest Common Multiple (LCM)",id:"lowest-common-multiple-lcm",level:2},{value:"Brute Force Approach",id:"brute-force-approach-3",level:3},{value:"Notes",id:"notes-9",level:4},{value:"Time Complexity",id:"time-complexity-9",level:4},{value:"Space Complexity",id:"space-complexity-9",level:4},{value:"Optimized Approach Using GCD",id:"optimized-approach-using-gcd",level:3},{value:"Notes",id:"notes-10",level:4},{value:"Time Complexity",id:"time-complexity-10",level:4},{value:"Space Complexity",id:"space-complexity-10",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-math",children:"Basic Math"})}),"\n",(0,s.jsx)(n.h2,{id:"count-digits-of-a-number",children:"Count Digits of a Number"}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-approach",children:"Brute Force Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int countDigit(int n) {\n        int noOfDigits = 0;\n        if (n == 0) return 1;\n        while (n > 0) {\n            noOfDigits = noOfDigits + 1;\n            n = n / 10;\n        }\n        return noOfDigits;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This approach iteratively divides ",(0,s.jsx)(n.code,{children:"n"})," by 10 to count the number of digits."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(log base 10 of n)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1) \u2014 Uses a constant amount of extra space."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach",children:"Optimized Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int countDigits(int n) {\n        int count = (int)(Math.log10(n) + 1);\n        return count;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-1",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses logarithm base 10 to compute the number of digits directly."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-1",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1) \u2014 Uses a single mathematical operation."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-1",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1) \u2014 No extra space used."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"reversing-a-number",children:"Reversing a Number"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int reverseNumber(int n) {\n    int reversedNum = 0;\n    while (n > 0) {\n        reversedNum = (reversedNum * 10) + n % 10;\n        n = n / 10;\n    }\n    return reversedNum;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-2",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extracts digits using modulo (%) and reconstructs the number."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-2",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(log base 10 of n) \u2014 Proportional to the number of digits."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-2",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1) \u2014 Uses only a few integer variables."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"count-total-number-of-divisors",children:"Count Total Number of Divisors"}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-approach-1",children:"Brute Force Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int countTotalNoOfDivisors(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) count++;\n        }\n        return count;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-3",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Iterates from 1 to n, checking divisibility."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-3",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(n) \u2014 Checks each number up to n."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-3",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach-1",children:"Optimized Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int countTotalNoOfDivisors(int n) {\n        int count = 0;\n        for (int i = 1; i * i <= n; ++i) {\n            if (n % i == 0) {\n                count += 1;\n                if (i != (n / i)) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-4",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Iterates only up to square root of n, counting both i and n/i as divisors."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-4",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(sqrt(n))"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-4",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"greatest-common-divisor-gcd",children:"Greatest Common Divisor (GCD)"}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-approach-2",children:"Brute Force Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int GCD(int n1, int n2) {\n        int gcd = 1;\n        int minOfN1N2 = Math.min(n1, n2);\n        for (int i = 2; i <= minOfN1N2; i++) {\n            if (n1 % i == 0 && n2 % i == 0) gcd = i;\n        }\n        return gcd;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-5",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Checks all numbers up to min(n1, n2) to find the highest divisor."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-5",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(min(n1, n2))"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-5",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach-2",children:"Optimized Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int GCD(int n1, int n2) {\n        int minOfN1N2 = Math.min(n1, n2);\n        for (int i = minOfN1N2; i >= 2; i--) {\n            if (n1 % i == 0 && n2 % i == 0) return i;\n        }\n        return 1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-6",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Starts from min(n1, n2) and finds the first common divisor."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-6",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(min(n1, n2))"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-6",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach-using-euclidean-algorithm",children:"Optimized Approach Using Euclidean Algorithm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int GCD(int n1, int n2) {\n       while (n1 != 0 && n2 != 0) {\n        if (n1 > n2) n1 = n1 - n2;\n        else n2 = n2 - n1;\n       }\n       return (n1 == 0) ? n2 : n1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-7",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses subtraction-based Euclidean Algorithm."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-7",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(max(n1, n2)) \u2014 Worst case."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-7",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach-using-euclidean-algorithm-with-modulo",children:"Optimized Approach Using Euclidean Algorithm With Modulo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int GCD(int n1, int n2) {\n       while (n1 != 0 && n2 != 0) {\n        if (n1 > n2) n1 = n1 % n2;\n        else n2 = n2 % n1;\n       }\n       return (n1 == 0) ? n2 : n1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-8",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses modulo-based Euclidean Algorithm, which is faster than subtraction."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-8",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(log(max(n1, n2)))"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-8",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"lowest-common-multiple-lcm",children:"Lowest Common Multiple (LCM)"}),"\n",(0,s.jsx)(n.h3,{id:"brute-force-approach-3",children:"Brute Force Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int LCM(int n1, int n2) {\n    int i = 1;\n    int max = Math.max(n1, n2);\n    while (true) {\n      int mul = i * max;\n      if (mul % n1 == 0 && mul % n2 == 0) {\n        return mul;\n      }\n      i++;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-9",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Finds the smallest multiple of max(n1, n2) that is divisible by both."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-9",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(n1 * n2) in the worst case."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-9",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"optimized-approach-using-gcd",children:"Optimized Approach Using GCD"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int GCD(int n1, int n2) {\n    while (n1 != 0 && n2 != 0) {\n      if (n1 > n2) n1 = n1 % n2;\n      else n2 = n2 % n1;\n    }\n    return (n1 == 0) ? n2 : n1;\n  }\n\n  public int LCM(int n1, int n2) {\n    return (n1 * n2) / GCD(n1, n2);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"notes-10",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses the formula: LCM(a, b) = (a * b) / GCD(a, b)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"time-complexity-10",children:"Time Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(log(max(n1, n2)))"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"space-complexity-10",children:"Space Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"O(1)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var l=i(6540);const s={},t=l.createContext(s);function c(e){const n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);