"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[5644],{4663:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"DSA/Basics/BasicStrings","title":"Basic Strings","description":"Reverse a string","source":"@site/docs/DSA/2. Basics/BasicStrings.md","sourceDirName":"DSA/2. Basics","slug":"/DSA/Basics/BasicStrings","permalink":"/knowledge-hub/docs/DSA/Basics/BasicStrings","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/2. Basics/BasicStrings.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basic Recursion","permalink":"/knowledge-hub/docs/DSA/Basics/BasicRecursion"},"next":{"title":"Sorting Algorithms","permalink":"/knowledge-hub/docs/DSA/Sorting/Sorting"}}');var s=r(4848),t=r(8453);const a={},l="Basic Strings",c={},o=[{value:"Reverse a string",id:"reverse-a-string",level:2},{value:"Palindrome Check",id:"palindrome-check",level:2},{value:"Largest odd number in a string",id:"largest-odd-number-in-a-string",level:2},{value:"Longest common prefix",id:"longest-common-prefix",level:2},{value:"Isomorphic string",id:"isomorphic-string",level:2},{value:"Rotate string",id:"rotate-string",level:2},{value:"Example:",id:"example",level:3},{value:"Solution:",id:"solution",level:3},{value:"Valid Anagram",id:"valid-anagram",level:2},{value:"Example:",id:"example-1",level:3},{value:"Solution:",id:"solution-1",level:3},{value:"Sort characters by frequency",id:"sort-characters-by-frequency",level:2},{value:"Example:",id:"example-2",level:3},{value:"Solution:",id:"solution-2",level:3}];function h(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"basic-strings",children:"Basic Strings"})}),"\n",(0,s.jsx)(e.h2,{id:"reverse-a-string",children:"Reverse a string"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public void reverseString(Vector<Character> s) {\n        int start = 0; int end = s.size() - 1;\n\n        while(start < end) {\n            char ch = s.get(start);\n            s.set(start, s.get(end));\n            s.set(end, ch);\n\n            start++;\n            end--;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(1)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"palindrome-check",children:"Palindrome Check"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public boolean palindromeCheck(String s) {\n        int start = 0, end = s.length() - 1;\n        while(start < end) {\n            if(s.charAt(start) != s.charAt(end)) return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(1)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"largest-odd-number-in-a-string",children:"Largest odd number in a string"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public String largeOddNum(String s) {\n        int index = -1;\n        int i;\n        for(i = s.length() - 1; i >= 0; i--) {\n            if((s.charAt(i) - '0') % 2 == 1 ) {\n                index = i;\n                break;\n            }\n        }\n        if(index == -1) return \"\";\n\n        i=0;\n        while(i <= index && s.charAt(i) == '0') i++;\n\n        return s.substring(i, index+1);\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(1)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"longest-common-prefix",children:"Longest common prefix"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'import java.util.Arrays;\n\nclass Solution {\n    public String longestCommonPrefix(String[] str) {\n        String ans = "";\n\n        Arrays.sort(str);\n\n        String first = str[0];\n        String last = str[str.length - 1];\n\n        for(int i=0; i< str.length; i++) {\n            if(first.charAt(i) != last.charAt(i)) return ans;\n\n            ans += first.charAt(i);\n        }\n\n        return ans;\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(NlogN)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(1)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"isomorphic-string",children:"Isomorphic string"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public boolean isomorphicString(String s, String t) {\n        if (s.length() != t.length()) return false; // Different lengths can't be isomorphic\n\n        Map<Character, Character> mapST = new HashMap<>();\n        Map<Character, Character> mapTS = new HashMap<>();\n\n        for (int i = 0; i < s.length(); i++) {\n            char c1 = s.charAt(i);\n            char c2 = t.charAt(i);\n\n            // Check if s \u2192 t mapping exists and is correct\n            if (mapST.containsKey(c1) && mapST.get(c1) != c2) {\n                return false;\n            }\n\n            // Check if t \u2192 s mapping exists and is correct\n            if (mapTS.containsKey(c2) && mapTS.get(c2) != c1) {\n                return false;\n            }\n\n            // Add mappings\n            mapST.put(c1, c2);\n            mapTS.put(c2, c1);\n        }\n\n        return true;\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(N)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"rotate-string",children:"Rotate string"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s."}),"\n",(0,s.jsx)(e.li,{children:"A shift on s consists of moving the leftmost character of s to the rightmost position."}),"\n",(0,s.jsx)(e.li,{children:'For example, if s = "abcde", then it will be "bcdea" after one shift.'}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'Input : s = "abcde" , goal = "cdeab"\nOutput : true\n\nExplanation : After performing 2 shifts we can achieve the goal string from string s.\nAfter first shift the string s is => bcdea\nAfter second shift the string s is => cdeab.\n'})}),"\n",(0,s.jsx)(e.h3,{id:"solution",children:"Solution:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public boolean rotateString(String s, String goal) {\n        if(s.length() != goal.length()) return false;\n\n        String temp = s + s;\n        return temp.contains(goal);\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(N)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"valid-anagram",children:"Valid Anagram"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Given two strings s and t, return true if t is an anagram of s, and false otherwise."}),"\n",(0,s.jsx)(e.li,{children:"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-1",children:"Example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'Input : s = "anagram" , t = "nagaram"\nOutput : true\nExplanation : We can rearrange the characters of string s to get string t as frequency of all characters from both strings is same.\n'})}),"\n",(0,s.jsx)(e.h3,{id:"solution-1",children:"Solution:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n  public boolean anagramStrings(String s, String t) {\n    if (s.length() != t.length()) return false;\n\n    Map<Character, Integer> mp = new HashMap<>();\n\n    // Count character frequencies in 's'\n    for (int i = 0; i < s.length(); i++) {\n      mp.put(s.charAt(i), mp.getOrDefault(s.charAt(i), 0) + 1);\n    }\n\n    // Reduce counts based on 't'\n    for (int i = 0; i < t.length(); i++) {\n      char ch = t.charAt(i);\n      if (!mp.containsKey(ch) || mp.get(ch) == 0) {\n        return false; // Extra or unmatched character\n      }\n      mp.put(ch, mp.get(ch) - 1);\n    }\n\n    return true;\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(N)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(N)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"sort-characters-by-frequency",children:"Sort characters by frequency"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"You are given a string s. Return the array of unique characters, sorted by highest to lowest occurring characters."}),"\n",(0,s.jsx)(e.li,{children:"If two or more characters have same frequency then arrange them in alphabetic order."}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-2",children:"Example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input : s = \"tree\"\nOutput : ['e', 'r', 't' ]\nExplanation : The occurrences of each character are as shown below :\ne --\x3e 2\nr --\x3e 1\nt --\x3e 1.\nThe r and t have same occurrences , so we arrange them by alphabetic order.\n"})}),"\n",(0,s.jsx)(e.h3,{id:"solution-2",children:"Solution:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n  public List<Character> frequencySort(String s) {\n    Map<Character, Integer> freqMap = new HashMap<>();\n\n    // Step 1: Count character frequencies\n    for (char c : s.toCharArray()) {\n      freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n    }\n\n    // Step 2: Convert to List and sort\n    List<Character> charList = new ArrayList<>(freqMap.keySet());\n    charList.sort(\n        (a, b) -> freqMap.get(a).equals(freqMap.get(b)) ? a - b : freqMap.get(b) - freqMap.get(a));\n\n    return charList;\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Time Complexity:"})," O(NlogN)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.em,{children:"Space Complexity:"})," O(N)"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function a(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);