"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[3472],{8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function i(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),t.createElement(s.Provider,{value:e},n.children)}},8582:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"DSA/Arrays/Logic Building/UnionOfTwoSortedArrays","title":"Union of two sorted arrays","description":"Problem","source":"@site/docs/DSA/4. Arrays/2. Logic Building/UnionOfTwoSortedArrays.md","sourceDirName":"DSA/4. Arrays/2. Logic Building","slug":"/DSA/Arrays/Logic Building/UnionOfTwoSortedArrays","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/UnionOfTwoSortedArrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/4. Arrays/2. Logic Building/UnionOfTwoSortedArrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Remove duplicates from sorted array","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/RemoveDuplicatesFromSortedArray"},"next":{"title":"2 Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/2Sum"}}');var o=r(4848),s=r(8453);const i={},a="Union of two sorted arrays",u={},l=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"union-of-two-sorted-arrays",children:"Union of two sorted arrays"})}),"\n",(0,o.jsx)(e.h2,{id:"problem",children:"Problem"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Given two sorted arrays nums1 and nums2, return an array that contains the union of these two arrays. The elements in the union must be in ascending order."}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"The union of two arrays is an array where all values are distinct and are present in either the first array, the second array, or both."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 7]\n\nOutput: [1, 2, 3, 4, 5, 7]\n\nExplanation: The elements 1, 2 are common to both, 3, 4, 5 are from nums1 and 7 is from nums2\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: nums1 = [3, 4, 6, 7, 9, 9], nums2 = [1, 5, 7, 8, 8]\n\nOutput: [1, 3, 4, 5, 6, 7, 8, 9]\n\nExplanation: The element 7 is common to both, 3, 4, 6, 9 are from nums1 and 1, 5, 8 is from nums2\n"})}),"\n",(0,o.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public int[] unionArray(int[] nums1, int[] nums2) {\n        Set<Integer> set = new TreeSet<>();\n\n        // Insert all elements of nums1 into the set\n        for (int num : nums1) {\n            set.add(num);\n        }\n\n        // Insert all elements of nums2 into the set\n        for (int num : nums2) {\n            set.add(num);\n        }\n\n        // Convert the set to an integer array to get the union\n        int[] union = new int[set.size()];\n        int index = 0;\n        for (int num : set) {\n            union[index++] = num;\n        }\n\n        return union;\n    }\n}\n"})})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);