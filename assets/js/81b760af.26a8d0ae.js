"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[4504],{8080:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"DSA/Basics/BasicArrays","title":"Basic Arrays","description":"Sum of Array Elements","source":"@site/docs/DSA/2. Basics/BasicArrays.md","sourceDirName":"DSA/2. Basics","slug":"/DSA/Basics/BasicArrays","permalink":"/knowledge-hub/docs/DSA/Basics/BasicArrays","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/DSA/2. Basics/BasicArrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java OOPS Concepts","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaOOPS"},"next":{"title":"Basic Hashing","permalink":"/knowledge-hub/docs/DSA/Basics/BasicHashing"}}');var l=i(4848),s=i(8453);const t={},a="Basic Arrays",c={},o=[{value:"Sum of Array Elements",id:"sum-of-array-elements",level:2},{value:"Code:",id:"code",level:3},{value:"Time Complexity:",id:"time-complexity",level:3},{value:"Space Complexity:",id:"space-complexity",level:3},{value:"Count of Odd Numbers in Array",id:"count-of-odd-numbers-in-array",level:2},{value:"Code:",id:"code-1",level:3},{value:"Time Complexity:",id:"time-complexity-1",level:3},{value:"Space Complexity:",id:"space-complexity-1",level:3},{value:"Reverse an Array",id:"reverse-an-array",level:2},{value:"Brute Force Approach",id:"brute-force-approach",level:3},{value:"Code:",id:"code-2",level:3},{value:"Time Complexity:",id:"time-complexity-2",level:3},{value:"Space Complexity:",id:"space-complexity-2",level:3},{value:"Optimized - Two Pointer Approach",id:"optimized---two-pointer-approach",level:3},{value:"Code:",id:"code-3",level:3},{value:"Time Complexity:",id:"time-complexity-3",level:3},{value:"Space Complexity:",id:"space-complexity-3",level:3},{value:"Check if the Array is Sorted",id:"check-if-the-array-is-sorted",level:2},{value:"Brute Force Approach",id:"brute-force-approach-1",level:3},{value:"Code:",id:"code-4",level:3},{value:"Time Complexity:",id:"time-complexity-4",level:3},{value:"Space Complexity:",id:"space-complexity-4",level:3},{value:"Optimized Approach",id:"optimized-approach",level:3},{value:"Code:",id:"code-5",level:3},{value:"Time Complexity:",id:"time-complexity-5",level:3},{value:"Space Complexity:",id:"space-complexity-5",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"basic-arrays",children:"Basic Arrays"})}),"\n",(0,l.jsx)(n.h2,{id:"sum-of-array-elements",children:"Sum of Array Elements"}),"\n",(0,l.jsx)(n.h3,{id:"code",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int sum(int arr[], int n) {\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Iterates through the array once)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(1)"})," (Uses only a constant amount of extra space)"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"count-of-odd-numbers-in-array",children:"Count of Odd Numbers in Array"}),"\n",(0,l.jsx)(n.h3,{id:"code-1",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int countOdd(int[] arr, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if(arr[i] % 2 != 0) count += 1;\n    }\n    return count;\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity-1",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Iterates through the array once)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity-1",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(1)"})," (Uses only a constant amount of extra space)"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"reverse-an-array",children:"Reverse an Array"}),"\n",(0,l.jsx)(n.h3,{id:"brute-force-approach",children:"Brute Force Approach"}),"\n",(0,l.jsx)(n.h3,{id:"code-2",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public void reverse(int[] arr, int n) {\n      int[] temp = new int[n];\n\n      for(int i=0; i<n; i++) {\n        temp[n-i-1] = arr[i];\n      }\n\n      for(int i=0; i<n; i++) {\n        arr[i] = temp[i];\n      }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity-2",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Iterates through the array twice)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity-2",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Uses an extra array)"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"optimized---two-pointer-approach",children:"Optimized - Two Pointer Approach"}),"\n",(0,l.jsx)(n.h3,{id:"code-3",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public void reverse(int[] arr, int n) {\n      int temp;\n      int start = 0;\n      int end = n-1;\n\n      while(start < end) {\n        temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n\n        start++;\n        end--;\n      }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity-3",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Iterates through half of the array)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity-3",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(1)"})," (Swaps elements in place)"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"check-if-the-array-is-sorted",children:"Check if the Array is Sorted"}),"\n",(0,l.jsx)(n.h3,{id:"brute-force-approach-1",children:"Brute Force Approach"}),"\n",(0,l.jsx)(n.h3,{id:"code-4",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n    boolean arraySortedOrNot(int[] arr, int n) {\n       for(int i = 0; i< n; i++){\n        for(int j=i+1; j<n; j++) {\n          if(arr[i] > arr[j]) return false;\n        }\n       }\n       return true;\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity-4",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n\xb2)"})," (Compares every element with all later elements)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity-4",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(1)"})," (No extra space used)"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"optimized-approach",children:"Optimized Approach"}),"\n",(0,l.jsx)(n.h3,{id:"code-5",children:"Code:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class Solution {\n  boolean arraySortedOrNot(int[] arr, int n) {\n    for (int i = 1; i < n; i++) {\n      if (arr[i] < arr[i - 1]) return false;\n    }\n    return true;\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"time-complexity-5",children:"Time Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(n)"})," (Iterates through the array once)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"space-complexity-5",children:"Space Complexity:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"O(1)"})," (No extra space used)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(6540);const l={},s=r.createContext(l);function t(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);