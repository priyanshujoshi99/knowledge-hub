"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[8472],{4690:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"DSA/Arrays/FAQs - Medium/KadaneAlgo","title":"Kadane\'s Algorithm","description":"Problem","source":"@site/docs/DSA/4. Arrays/3. FAQs - Medium/KadaneAlgo.md","sourceDirName":"DSA/4. Arrays/3. FAQs - Medium","slug":"/DSA/Arrays/FAQs - Medium/KadaneAlgo","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/KadaneAlgo","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/DSA/4. Arrays/3. FAQs - Medium/KadaneAlgo.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dutch National Flag Algo","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/DutchNationalFlagAlgo"},"next":{"title":"Leaders in an Array","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/LeadersInAnArray"}}');var a=r(4848),s=r(8453);const i={},o="Kadane's Algorithm",u={},l=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"kadanes-algorithm",children:"Kadane's Algorithm"})}),"\n",(0,a.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,a.jsx)(n.p,{children:"Given an integer array nums, find the subarray with the largest sum and return the sum of the elements present in that subarray."}),"\n",(0,a.jsx)(n.p,{children:"A subarray is a contiguous non-empty sequence of elements within an array."}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [2, 3, 5, -2, 7, -4]\n\nOutput: 15\n\nExplanation: The subarray from index 0 to index 4 has the largest sum = 15\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [-2, -3, -7, -2, -10, -4]\n\nOutput: -2\n\nExplanation: The element on index 0 or index 3 make up the largest sum when taken as a subarray\n"})}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int maxSubArray(int[] nums) {\n    int sum = 0, maxSum = Integer.MIN_VALUE;\n    // for getting the subarray\n    int start = 0, ansStart= -1, ansEnd = -1;\n\n    for (int i = 0; i < nums.length; i++) {\n      if (sum == 0) start = i;\n\n      sum += nums[i];\n\n      if (sum > maxSum) {\n        maxSum = sum;\n        ansStart = start;\n        ansEnd = i;\n      }\n\n      if (sum < 0) sum = 0;\n    }\n\n    return maxSum;\n  }\n}\n\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);