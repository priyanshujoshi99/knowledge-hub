"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[391],{3056:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>u,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"DSA/Arrays/FAQs - Medium/3Sum","title":"3 Sum","description":"Problem","source":"@site/docs/DSA/4. Arrays/3. FAQs - Medium/3Sum.md","sourceDirName":"DSA/4. Arrays/3. FAQs - Medium","slug":"/DSA/Arrays/FAQs - Medium/3Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/3Sum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/4. Arrays/3. FAQs - Medium/3Sum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"2 Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/2Sum"},"next":{"title":"4 Sum","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/4Sum"}}');var r=t(4848),i=t(8453);const u={},a="3 Sum",l={},d=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function m(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"3-sum",children:"3 Sum"})}),"\n",(0,r.jsx)(e.h2,{id:"problem",children:"Problem"}),"\n",(0,r.jsx)(e.p,{children:"Given an integer array nums.Return all triplets such that:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"i != j, i != k, and j != k"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"nums[i] + nums[j] + nums[k] == 0."}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Notice that the solution set must not contain duplicate triplets. One element can be a part of multiple triplets."}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"The output and the triplets can be returned in any order."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Input: nums = [2, -2, 0, 3, -3, 5]\n\nOutput: [[-2, 0, 2], [-3, -2, 5], [-3, 0, 3]]\n\nExplanation: nums[1] + nums[2] + nums[0] = 0\nnums[4] + nums[1] + nums[5] = 0\nnums[4] + nums[2] + nums[3] = 0\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Input: nums = [2, -1, -1, 3, -1]\n\nOutput: [[-1, -1, 2]]\n\nExplanation: nums[1] + nums[2] + nums[0] = 0\nNote that we have used two -1s as they are separate elements with different indexes\nBut we have not used the -1 at index 4 as that would create a duplicate triplet\n"})}),"\n",(0,r.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"class Solution {\n  public List<List<Integer>> threeSum(int[] nums) {\n    int n = nums.length;\n    List<List<Integer>> ans = new ArrayList<>();\n\n    Arrays.sort(nums);\n\n    // Iterate through the array to find triplets\n    for (int i = 0; i < n; i++) {\n      // Skip duplicates\n      if (i > 0 && nums[i] == nums[i - 1]) continue;\n\n      int j = i + 1;\n      int k = n - 1;\n\n      while (j < k) {\n        int sum = nums[i] + nums[j] + nums[k];\n\n        if (sum < 0) {\n          j++;\n        } else if (sum > 0) {\n          k--;\n        } else {\n          // Found a triplet that sums up to target\n          List<Integer> temp = new ArrayList<>();\n          temp.add(nums[i]);\n          temp.add(nums[j]);\n          temp.add(nums[k]);\n          ans.add(temp);\n\n          // Skip duplicates\n          j++;\n          k--;\n          while (j < k && nums[j] == nums[j - 1]) j++;\n          while (j < k && nums[k] == nums[k + 1]) k--;\n        }\n      }\n    }\n    return ans;\n  }\n}\n\n"})})]})}function o(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>u,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function u(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:u(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);