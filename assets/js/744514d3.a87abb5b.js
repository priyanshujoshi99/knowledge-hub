"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[4651],{1715:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"DSA/Basics/BasicHashing","title":"Basic Hashing","description":"1. Introduction to Hashing","source":"@site/docs/DSA/2. Basics/BasicHashing.md","sourceDirName":"DSA/2. Basics","slug":"/DSA/Basics/BasicHashing","permalink":"/knowledge-hub/docs/DSA/Basics/BasicHashing","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/DSA/2. Basics/BasicHashing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basic Arrays","permalink":"/knowledge-hub/docs/DSA/Basics/BasicArrays"},"next":{"title":"Basic Math","permalink":"/knowledge-hub/docs/DSA/Basics/BasicMath"}}');var r=s(4848),a=s(8453);const t={},l="Basic Hashing",c={},h=[{value:"1. Introduction to Hashing",id:"1-introduction-to-hashing",level:2},{value:"2. Number Hashing",id:"2-number-hashing",level:2},{value:"2.1 Method 1: Basic Traversal and Counting",id:"21-method-1-basic-traversal-and-counting",level:3},{value:"2.2 Method 2: Hashing for Efficient Counting",id:"22-method-2-hashing-for-efficient-counting",level:3},{value:"3. Character Hashing",id:"3-character-hashing",level:2},{value:"3.1 Understanding ASCII Values",id:"31-understanding-ascii-values",level:3},{value:"3.2 Hashing for Lowercase Alphabets",id:"32-hashing-for-lowercase-alphabets",level:3},{value:"4. Hashing Implementations",id:"4-hashing-implementations",level:2},{value:"5. Problems",id:"5-problems",level:2},{value:"5.1 Highest Occurring Element in an Array",id:"51-highest-occurring-element-in-an-array",level:3},{value:"5.2 Second Highest Occurring Element",id:"52-second-highest-occurring-element",level:3},{value:"5.3 Sum of Highest and Lowest Frequency",id:"53-sum-of-highest-and-lowest-frequency",level:3}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"basic-hashing",children:"Basic Hashing"})}),"\n",(0,r.jsx)(e.h2,{id:"1-introduction-to-hashing",children:"1. Introduction to Hashing"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Hashing"})," is a technique used to quickly find, store, and manage data."]}),"\n",(0,r.jsxs)(e.li,{children:["It converts an input (e.g., a number or string) into a fixed-size value called a ",(0,r.jsx)(e.strong,{children:"hash"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["The hash points to the location of the data in a ",(0,r.jsx)(e.strong,{children:"hash table"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Goal"}),": Make data retrieval fast, even with large datasets."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"2-number-hashing",children:"2. Number Hashing"}),"\n",(0,r.jsx)(e.h3,{id:"21-method-1-basic-traversal-and-counting",children:"2.1 Method 1: Basic Traversal and Counting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int[] arr = {5, 6, 5, 6, 9, 6};\nint count = 0;\nfor (int num : arr) {\n    if (num == 6) {\n        count++;\n    }\n}\nSystem.out.println(count);  // Output: 3\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Traverses the array once."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Space Complexity"}),": O(1)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Uses a single variable for counting."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use Case"}),": Simple counting for small datasets."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"22-method-2-hashing-for-efficient-counting",children:"2.2 Method 2: Hashing for Efficient Counting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int[] arr = {5, 6, 5, 6, 9, 6};\nint[] hashTable = new int[10];\nfor (int num : arr) {\n    hashTable[num]++;\n}\nSystem.out.println(hashTable[6]);  // Output: 3\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Traverses the array once."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Space Complexity"}),": O(M)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"M is the size of the hash table (10 in this case)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use Case"}),": Efficient counting for larger datasets with known value ranges."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"3-character-hashing",children:"3. Character Hashing"}),"\n",(0,r.jsx)(e.h3,{id:"31-understanding-ascii-values",children:"3.1 Understanding ASCII Values"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ASCII"})," assigns numerical values to characters:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Lowercase letters: ",(0,r.jsx)(e.code,{children:"'a'"})," (97) to ",(0,r.jsx)(e.code,{children:"'z'"})," (122)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Example: ",(0,r.jsx)(e.code,{children:"hash['a']++"})," translates to ",(0,r.jsx)(e.code,{children:"hash[97]++"}),"."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"32-hashing-for-lowercase-alphabets",children:"3.2 Hashing for Lowercase Alphabets"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Optimize by indexing relative to ",(0,r.jsx)(e.code,{children:"'a'"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Example: ",(0,r.jsx)(e.code,{children:"hash['b' - 'a'] = hash[1]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Advantages"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Reduces space to 26 indices (0\u201325)."}),"\n",(0,r.jsx)(e.li,{children:"Simplifies storage and retrieval."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"4-hashing-implementations",children:"4. Hashing Implementations"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"HashMap"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Average time complexity: O(1)."}),"\n",(0,r.jsx)(e.li,{children:"Worst-case time complexity: O(N) (due to collisions)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"TreeMap"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Time complexity: O(log N)."}),"\n",(0,r.jsx)(e.li,{children:"Ensures consistent performance."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"5-problems",children:"5. Problems"}),"\n",(0,r.jsx)(e.h3,{id:"51-highest-occurring-element-in-an-array",children:"5.1 Highest Occurring Element in an Array"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public int mostFrequentElement(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int maxCount = 0, element = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n            maxCount = Math.max(map.get(num), maxCount);\n        }\n\n        for (int num : nums) {\n            if (map.get(num) == maxCount) {\n                element = Math.min(element, num);\n            }\n        }\n\n        return element;\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Traverses the array twice."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Space Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Uses a HashMap to store frequencies."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"52-second-highest-occurring-element",children:"5.2 Second Highest Occurring Element"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public int secondMostFrequentElement(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int maxCount = 0, secondMaxCount = 0, element = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        for (int count : map.values()) {\n            if (count > maxCount) {\n                secondMaxCount = maxCount;\n                maxCount = count;\n            } else if (count > secondMaxCount && count < maxCount) {\n                secondMaxCount = count;\n            }\n        }\n\n        if (secondMaxCount == 0) return -1;\n\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == secondMaxCount) {\n                element = Math.min(element, entry.getKey());\n            }\n        }\n\n        return element;\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Traverses the array and map."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Space Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Uses a HashMap to store frequencies."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h3,{id:"53-sum-of-highest-and-lowest-frequency",children:"5.3 Sum of Highest and Lowest Frequency"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import java.util.*;\n\nclass Solution {\n    public int sumHighestAndLowestFrequency(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int maxCount = Integer.MIN_VALUE, minCount = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        for (int value : map.values()) {\n            maxCount = Math.max(value, maxCount);\n            minCount = Math.min(value, minCount);\n        }\n\n        return maxCount + minCount;\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Time Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Traverses the array and map."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Space Complexity"}),": O(N)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Uses a HashMap to store frequencies."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h1,{id:"general-notes-on-hashing",children:(0,r.jsx)(e.strong,{children:"General Notes on Hashing"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Collisions"}),": Occur when two inputs produce the same hash. Handled using techniques like chaining or open addressing."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Applications"}),": Databases, caching, password storage, and more."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Trade-offs"}),": Space vs. time complexity."]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>l});var i=s(6540);const r={},a=i.createContext(r);function t(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);