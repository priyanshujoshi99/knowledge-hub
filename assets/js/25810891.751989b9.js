"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[4927],{8408:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"DSA/Arrays/FAQs - Medium/PrintTheMatrixInSpiralManner","title":"Print the matrix in spiral manner","description":"Problem","source":"@site/docs/DSA/4. Arrays/3. FAQs - Medium/PrintTheMatrixInSpiralManner.md","sourceDirName":"DSA/4. Arrays/3. FAQs - Medium","slug":"/DSA/Arrays/FAQs - Medium/PrintTheMatrixInSpiralManner","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/PrintTheMatrixInSpiralManner","draft":false,"unlisted":false,"editUrl":"https://priyanshujoshi99.github.io/knowledge-hub/docs/DSA/4. Arrays/3. FAQs - Medium/PrintTheMatrixInSpiralManner.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Pascal\'s Triangle","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/PascalsTriangle"},"next":{"title":"Rearrange array elements by sign","permalink":"/knowledge-hub/docs/DSA/Arrays/FAQs - Medium/RearrangeArrayElementsBySign"}}');var i=r(4848),a=r(8453);const s={},o="Print the matrix in spiral manner",l={},d=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"print-the-matrix-in-spiral-manner",children:"Print the matrix in spiral manner"})}),"\n",(0,i.jsx)(e.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(e.p,{children:"Given an M * N matrix, print the elements in a clockwise spiral manner. Return an array with the elements in the order of their appearance when printed in a spiral manner."}),"\n",(0,i.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: matrix = [[1, 2, 3], [4 ,5 ,6], [7, 8, 9]]\n\nOutput: [1, 2, 3, 6, 9, 8, 7, 4, 5]\n\nExplanation: The elements in the spiral order are 1, 2, 3 -> 6, 9 -> 8, 7 -> 4, 5\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: matrix = [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nOutput: [1, 2, 3, 4, 8, 7, 6, 5]\n\nExplanation: The elements in the spiral order are 1, 2, 3, 4 -> 8, 7, 6, 5\n"})}),"\n",(0,i.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Solution {\n  public List<Integer> spiralOrder(int[][] matrix) {\n    List<Integer> ans = new ArrayList<>();\n    int rows = matrix.length;\n    int columns = matrix[0].length;\n\n    int left = 0;\n    int right = columns - 1;\n    int top = 0;\n    int bottom = rows - 1;\n\n    while (top <= bottom && left <= right) {\n      for (int i = left; i <= right; i++) {\n        ans.add(matrix[top][i]);\n      }\n      top++;\n\n      for (int i = top; i <= bottom; i++) {\n        ans.add(matrix[i][right]);\n      }\n      right--;\n\n      if(top <= bottom) {\n        for (int i = right; i >= left; i--) {\n          ans.add(matrix[bottom][i]);\n        }\n        bottom--;\n      }\n\n      if(left <= right) {\n        for (int i = bottom; i >= top; i--) {\n          ans.add(matrix[i][left]);\n        }\n        left++;\n      }\n    }\n\n    return ans;\n  }\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);