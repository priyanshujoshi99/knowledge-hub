"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[6828],{7159:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"DSA/Arrays/Logic Building/RemoveDuplicatesFromSortedArray","title":"Remove duplicates from sorted array","description":"Problem","source":"@site/docs/DSA/4. Arrays/2. Logic Building/RemoveDuplicatesFromSortedArray.md","sourceDirName":"DSA/4. Arrays/2. Logic Building","slug":"/DSA/Arrays/Logic Building/RemoveDuplicatesFromSortedArray","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/RemoveDuplicatesFromSortedArray","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/4. Arrays/2. Logic Building/RemoveDuplicatesFromSortedArray.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Move Zeros to End","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/MoveZerosToEnd"},"next":{"title":"Union of two sorted arrays","permalink":"/knowledge-hub/docs/DSA/Arrays/Logic Building/UnionOfTwoSortedArrays"}}');var s=r(4848),o=r(8453);const i={},a="Remove duplicates from sorted array",l={},u=[{value:"Problem",id:"problem",level:2},{value:"Examples",id:"examples",level:3},{value:"Solution",id:"solution",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"remove-duplicates-from-sorted-array",children:"Remove duplicates from sorted array"})}),"\n",(0,s.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array nums sorted in non-decreasing order, remove all duplicates in-place so that each unique element appears only once. Return the number of unique elements in the array."}),"\n",(0,s.jsx)(n.p,{children:"If the number of unique elements be k, then,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Change the array nums such that the first k elements of nums contain the unique values in the order that they were present originally."}),"\n",(0,s.jsx)(n.li,{children:"The remaining elements, as well as the size of the array does not matter in terms of correctness."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"An array sorted in non-decreasing order is an array where every element to the right of an element in either equal to or greater in value than that element."}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [0, 0, 3, 3, 5, 6]\n\nOutput: [0, 3, 5, 6, _, _]\n\nExplanation: There are 4 distinct elements in nums and the elements marked as _ can have any value.\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [-2, 2, 4, 4, 4, 4, 5, 5]\n\nOutput: [-2, 2, 4, 5, _, _, _, _]\n\nExplanation: There are 4 distinct elements in nums and the elements marked as _ can have any value.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class Solution {\n  public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) {\n      return 0;\n    }\n\n    int i = 0;\n\n    for (int j = 1; j < nums.length; j++) {\n      if (nums[i] != nums[j]) {\n        i++;\n        nums[i] = nums[j];\n      }\n    }\n\n    return i + 1;\n  }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);