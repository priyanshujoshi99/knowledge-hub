"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[7101],{7549:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"DSA/Language Essentials/JavaCollections","title":"Java Collections","description":"1. Custom Classes","source":"@site/docs/DSA/1. Language Essentials/JavaCollections.md","sourceDirName":"DSA/1. Language Essentials","slug":"/DSA/Language Essentials/JavaCollections","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaCollections","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/1. Language Essentials/JavaCollections.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java Basics","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaBasics"},"next":{"title":"Java OOPS Concepts","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaOOPS"}}');var t=i(4848),s=i(8453);const l={},r="Java Collections",o={},c=[{value:"1. Custom Classes",id:"1-custom-classes",level:2},{value:"Example:",id:"example",level:3},{value:"2. Collections",id:"2-collections",level:2},{value:"a. List",id:"a-list",level:3},{value:"i. ArrayList",id:"i-arraylist",level:4},{value:"ii. LinkedList",id:"ii-linkedlist",level:4},{value:"iii. Stack",id:"iii-stack",level:4},{value:"iv. Vector",id:"iv-vector",level:4},{value:"b. Set",id:"b-set",level:3},{value:"i. HashSet",id:"i-hashset",level:4},{value:"ii. TreeSet",id:"ii-treeset",level:4},{value:"c. Queue",id:"c-queue",level:3},{value:"i. ArrayDeque",id:"i-arraydeque",level:4},{value:"ii. LinkedList (as Queue)",id:"ii-linkedlist-as-queue",level:4},{value:"iii. PriorityQueue",id:"iii-priorityqueue",level:4},{value:"3. Map",id:"3-map",level:2},{value:"a. HashMap",id:"a-hashmap",level:3},{value:"b. TreeMap",id:"b-treemap",level:3},{value:"4. Iterator",id:"4-iterator",level:2},{value:"a. ListIterator",id:"a-listiterator",level:3},{value:"5. Custom Comparator",id:"5-custom-comparator",level:2},{value:"6. Common Algorithms",id:"6-common-algorithms",level:2},{value:"Collections.sort(list)",id:"collectionssortlist",level:3},{value:"Collections.max(list)",id:"collectionsmaxlist",level:3},{value:"Collections.min(list)",id:"collectionsminlist",level:3},{value:"Collections.reverse(list)",id:"collectionsreverselist",level:3},{value:"Collections.sort(array)",id:"collectionssortarray",level:3},{value:"Collections.frequency(list, element)",id:"collectionsfrequencylist-element",level:3},{value:"Collections.binarySearch(list, key)",id:"collectionsbinarysearchlist-key",level:3},{value:"Math.pow(base, exponent)",id:"mathpowbase-exponent",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"java-collections",children:"Java Collections"})}),"\n",(0,t.jsx)(n.h2,{id:"1-custom-classes",children:"1. Custom Classes"}),"\n",(0,t.jsx)(n.p,{children:"Custom classes in Java are user-defined classes that encapsulate data and behavior. They are the building blocks of object-oriented programming in Java."}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @Override\n    public String toString() {\n        return "Person{name=\'" + name + "\', age=" + age + "}";\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"2-collections",children:"2. Collections"}),"\n",(0,t.jsx)(n.p,{children:"Collections in Java are used to store, retrieve, manipulate, and communicate aggregate data. The Java Collections Framework provides a set of interfaces and classes to handle collections of objects."}),"\n",(0,t.jsx)(n.h3,{id:"a-list",children:"a. List"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"List"})," is an ordered collection that allows duplicate elements."]}),"\n",(0,t.jsx)(n.h4,{id:"i-arraylist",children:"i. ArrayList"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ArrayList"})," is a resizable array implementation of the ",(0,t.jsx)(n.code,{children:"List"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add("Apple");\n        list.add("Banana");\n        list.add("Cherry");\n        System.out.println(list); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"ii-linkedlist",children:"ii. LinkedList"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"LinkedList"})," is a doubly-linked list implementation of the ",(0,t.jsx)(n.code,{children:"List"})," and ",(0,t.jsx)(n.code,{children:"Deque"})," interfaces."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.LinkedList;\nimport java.util.List;\n\npublic class LinkedListExample {\n    public static void main(String[] args) {\n        List<String> list = new LinkedList<>();\n        list.add("Apple");\n        list.add("Banana");\n        list.add("Cherry");\n        System.out.println(list); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"iii-stack",children:"iii. Stack"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Stack"})," is a last-in-first-out (LIFO) stack of objects."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.Stack;\n\npublic class StackExample {\n    public static void main(String[] args) {\n        Stack<String> stack = new Stack<>();\n        stack.push("Apple");\n        stack.push("Banana");\n        stack.push("Cherry");\n        System.out.println(stack.pop()); // Cherry\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"iv-vector",children:"iv. Vector"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Vector"})," is a synchronized resizable array implementation of the ",(0,t.jsx)(n.code,{children:"List"})," interface. It is thread safe."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.Vector;\nimport java.util.List;\n\npublic class VectorExample {\n    public static void main(String[] args) {\n        List<String> vector = new Vector<>();\n        vector.add("Apple");\n        vector.add("Banana");\n        vector.add("Cherry");\n        System.out.println(vector); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"b-set",children:"b. Set"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Set"})," is a collection that does not allow duplicate elements."]}),"\n",(0,t.jsx)(n.h4,{id:"i-hashset",children:"i. HashSet"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HashSet"})," is a hash table implementation of the ",(0,t.jsx)(n.code,{children:"Set"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.HashSet;\nimport java.util.Set;\n\npublic class HashSetExample {\n    public static void main(String[] args) {\n        Set<String> set = new HashSet<>();\n        set.add("Apple");\n        set.add("Banana");\n        set.add("Apple");\n        System.out.println(set); // [Apple, Banana]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"ii-treeset",children:"ii. TreeSet"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"TreeSet"})," is a red-black tree implementation of the ",(0,t.jsx)(n.code,{children:"Set"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.TreeSet;\nimport java.util.Set;\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        Set<String> set = new TreeSet<>();\n        set.add("Banana");\n        set.add("Apple");\n        set.add("Cherry");\n        System.out.println(set); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"c-queue",children:"c. Queue"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Queue"})," is a collection designed for holding elements prior to processing."]}),"\n",(0,t.jsx)(n.h4,{id:"i-arraydeque",children:"i. ArrayDeque"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ArrayDeque"})," is a resizable array implementation of the ",(0,t.jsx)(n.code,{children:"Deque"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayDeque;\nimport java.util.Queue;\n\npublic class ArrayDequeExample {\n    public static void main(String[] args) {\n        Queue<String> queue = new ArrayDeque<>();\n        queue.add("Apple");\n        queue.add("Banana");\n        queue.add("Cherry");\n        System.out.println(queue.poll()); // Apple\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"ii-linkedlist-as-queue",children:"ii. LinkedList (as Queue)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"LinkedList"})," can also be used as a ",(0,t.jsx)(n.code,{children:"Queue"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LinkedListQueueExample {\n    public static void main(String[] args) {\n        Queue<String> queue = new LinkedList<>();\n        queue.add("Apple");\n        queue.add("Banana");\n        queue.add("Cherry");\n        System.out.println(queue.poll()); // Apple\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"iii-priorityqueue",children:"iii. PriorityQueue"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"PriorityQueue"})," is a priority heap implementation of the ",(0,t.jsx)(n.code,{children:"Queue"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.PriorityQueue;\nimport java.util.Queue;\n\npublic class PriorityQueueExample {\n    public static void main(String[] args) {\n        Queue<String> queue = new PriorityQueue<>();\n        queue.add("Banana");\n        queue.add("Apple");\n        queue.add("Cherry");\n        System.out.println(queue.poll()); // Apple\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"3-map",children:"3. Map"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Map"})," is an object that maps keys to values."]}),"\n",(0,t.jsx)(n.h3,{id:"a-hashmap",children:"a. HashMap"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HashMap"})," is a hash table implementation of the ",(0,t.jsx)(n.code,{children:"Map"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.HashMap;\nimport java.util.Map;\n\npublic class HashMapExample {\npublic class HashMapExample {\n  public static void main(String[] args) {\n    Map<String, Integer> map = new HashMap<>();\n    map.put("Apple", 1);\n    map.put("Banana", 2);\n    map.put("Cherry", 3);\n\n    System.out.println(map.get("Banana")); // 2\n\n    for (Map.Entry<String, Integer> entry : map.entrySet()) {\n      System.out.print(entry.getKey());\n      System.out.print(", ");\n      System.out.println();\n      System.out.print(entry.getValue());\n      System.out.print(", ");\n      /* Output ->\n      Apple, Banana, Cherry,\n      1, 2, 3,\n      */\n    }\n\n    for (int value : map.values()) {\n      System.out.print(value);\n      System.out.print(", ");\n      /* Output ->\n      1, 2, 3,\n      */\n    }\n  }\n}\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"b-treemap",children:"b. TreeMap"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"TreeMap"})," is a red-black tree implementation of the ",(0,t.jsx)(n.code,{children:"Map"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.TreeMap;\nimport java.util.Map;\n\npublic class TreeMapExample {\n    public static void main(String[] args) {\n        Map<String, Integer> map = new TreeMap<>();\n        map.put("Banana", 2);\n        map.put("Apple", 1);\n        map.put("Cherry", 3);\n        System.out.println(map.get("Apple")); // 1\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"4-iterator",children:"4. Iterator"}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"Iterator"})," is used to traverse through the elements of a collection."]}),"\n",(0,t.jsx)(n.h3,{id:"a-listiterator",children:"a. ListIterator"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ListIterator"})," is an iterator for lists that allows bidirectional traversal."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\n\npublic class ListIteratorExample {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add("Apple");\n        list.add("Banana");\n        list.add("Cherry");\n\n        ListIterator<String> iterator = list.listIterator();\n        while (iterator.hasNext()) {\n            System.out.println(iterator.next());\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"5-custom-comparator",children:"5. Custom Comparator"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Comparator"})," is used to define a custom order for objects."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class CustomComparatorExample {\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<>();\n        people.add(new Person("Alice", 30));\n        people.add(new Person("Bob", 25));\n        people.add(new Person("Charlie", 35));\n\n        Collections.sort(people, new Comparator<Person>() {\n            @Override\n            public int compare(Person p1, Person p2) {\n                return Integer.compare(p1.getAge(), p2.getAge());\n            }\n        });\n\n        for (Person person : people) {\n            System.out.println(person);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"6-common-algorithms",children:"6. Common Algorithms"}),"\n",(0,t.jsx)(n.h3,{id:"collectionssortlist",children:"Collections.sort(list)"}),"\n",(0,t.jsx)(n.p,{children:"Sorts the specified list into ascending order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SortExample {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add("Banana");\n        list.add("Apple");\n        list.add("Cherry");\n        Collections.sort(list);\n        System.out.println(list); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collectionsmaxlist",children:"Collections.max(list)"}),"\n",(0,t.jsx)(n.p,{children:"Returns the maximum element in the list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MaxExample {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(10);\n        list.add(20);\n        list.add(5);\n        System.out.println(Collections.max(list)); // 20\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"collectionsminlist",children:"Collections.min(list)"}),"\n",(0,t.jsx)(n.p,{children:"Returns the minimum element in the list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MinExample {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(10);\n        list.add(20);\n        list.add(5);\n        System.out.println(Collections.min(list)); // 5\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"collectionsreverselist",children:"Collections.reverse(list)"}),"\n",(0,t.jsx)(n.p,{children:"Reverses the order of elements in the list."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ReverseExample {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add("Apple");\n        list.add("Banana");\n        list.add("Cherry");\n        Collections.reverse(list);\n        System.out.println(list); // [Cherry, Banana, Apple]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collectionssortarray",children:"Collections.sort(array)"}),"\n",(0,t.jsx)(n.p,{children:"Sorts the specified array into ascending order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.Collections;\n\npublic class SortArrayExample {\n    public static void main(String[] args) {\n        String[] array = {"Banana", "Apple", "Cherry"};\n        Arrays.sort(array);\n        System.out.println(Arrays.toString(array)); // [Apple, Banana, Cherry]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collectionsfrequencylist-element",children:"Collections.frequency(list, element)"}),"\n",(0,t.jsx)(n.p,{children:"Returns the number of elements in the list equal to the specified element."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class FrequencyExample {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add("Apple");\n        list.add("Banana");\n        list.add("Apple");\n        System.out.println(Collections.frequency(list, "Apple")); // 2\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collectionsbinarysearchlist-key",children:"Collections.binarySearch(list, key)"}),"\n",(0,t.jsx)(n.p,{children:"Searches the list for the specified key using the binary search algorithm."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class BinarySearchExample {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n        int index = Collections.binarySearch(list, 20);\n        System.out.println(index); // 1\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mathpowbase-exponent",children:"Math.pow(base, exponent)"}),"\n",(0,t.jsx)(n.p,{children:"Returns the value of the first argument raised to the power of the second argument."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class MathPowExample {\n    public static void main(String[] args) {\n        double result = Math.pow(2, 3);\n        System.out.println(result); // 8.0\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var a=i(6540);const t={},s=a.createContext(t);function l(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);