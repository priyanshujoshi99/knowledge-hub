"use strict";(self.webpackChunkprep_up=self.webpackChunkprep_up||[]).push([[3539],{4788:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"DSA/Language Essentials/JavaOOPS","title":"Java OOPS Concepts","description":"Classes and Objects","source":"@site/docs/DSA/1. Language Essentials/JavaOOPS.md","sourceDirName":"DSA/1. Language Essentials","slug":"/DSA/Language Essentials/JavaOOPS","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaOOPS","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/1. Language Essentials/JavaOOPS.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java Collections","permalink":"/knowledge-hub/docs/DSA/Language Essentials/JavaCollections"},"next":{"title":"Basic Arrays","permalink":"/knowledge-hub/docs/DSA/Basics/BasicArrays"}}');var l=s(4848),a=s(8453);const t={},r="Java OOPS Concepts",c={},d=[{value:"Classes and Objects",id:"classes-and-objects",level:2},{value:"Access Specifiers",id:"access-specifiers",level:3},{value:"Why Objects Are Needed?",id:"why-objects-are-needed",level:3},{value:"Methods or Functions",id:"methods-or-functions",level:2},{value:"<code>void</code> Method",id:"void-method",level:3},{value:"<code>private</code> Method",id:"private-method",level:3},{value:"<code>static</code> Method",id:"static-method",level:3},{value:"Method with Return Type",id:"method-with-return-type",level:3},{value:"Parameterized Method",id:"parameterized-method",level:3},{value:"Constructor",id:"constructor",level:2},{value:"Default Constructor",id:"default-constructor",level:3},{value:"Parameterized Constructor",id:"parameterized-constructor",level:3},{value:"<code>this</code> Keyword",id:"this-keyword",level:3},{value:"Encapsulation",id:"encapsulation",level:2},{value:"What is Encapsulation?",id:"what-is-encapsulation",level:3},{value:"Getter &amp; Setter",id:"getter--setter",level:3},{value:"Inheritance",id:"inheritance",level:2},{value:"What is Inheritance?",id:"what-is-inheritance",level:3},{value:"Types of Inheritance",id:"types-of-inheritance",level:3},{value:"<code>super</code> Keyword",id:"super-keyword",level:3},{value:"Polymorphism",id:"polymorphism",level:2},{value:"What is Polymorphism?",id:"what-is-polymorphism",level:3},{value:"Overriding Methods (<code>@Override</code>)",id:"overriding-methods-override",level:3},{value:"Abstraction",id:"abstraction",level:2},{value:"What is Abstraction?",id:"what-is-abstraction",level:3},{value:"Abstract Class and Method",id:"abstract-class-and-method",level:3},{value:"extends vs implements",id:"extends-vs-implements",level:3},{value:"Methods in Abstract Class",id:"methods-in-abstract-class",level:3},{value:"<code>super</code> in Implementing Class for Abstract",id:"super-in-implementing-class-for-abstract",level:3},{value:"Interface",id:"interface",level:3},{value:"default<code>and</code>static` in Interface",id:"defaultandstatic-in-interface",level:3},{value:"<code>super</code> in Implementing Class for Interface",id:"super-in-implementing-class-for-interface",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"java-oops-concepts",children:"Java OOPS Concepts"})}),"\n",(0,l.jsx)(n.h2,{id:"classes-and-objects",children:"Classes and Objects"}),"\n",(0,l.jsx)(n.h3,{id:"access-specifiers",children:"Access Specifiers"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Access specifiers"})," define the visibility or scope of a class, method, or variable."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"public"}),":"]})," Accessible from anywhere in the program."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class MyClass {\n    public int number = 10;\n\n    public void display() {\n        System.out.println("This is a public method.");\n    }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"private"}),":"]})," Accessible only within the class where it is declared."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class MyClass {\n    private int number = 10;\n\n    private void display() {\n        System.out.println("This is a private method.");\n    }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"protected"}),":"]})," Accessible within the same package and subclasses in other packages."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class MyClass {\n    protected int number = 10;\n\n    protected void display() {\n        System.out.println("This is a protected method.");\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"why-objects-are-needed",children:"Why Objects Are Needed?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Objects represent real-world entities with attributes (fields) and behaviors (methods)."}),"\n",(0,l.jsx)(n.li,{children:"They allow encapsulation, inheritance, and polymorphism in Java."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'class Car {\n    String brand;\n    int speed;\n\n    void drive() {\n        System.out.println(brand + " is driving at " + speed + " km/h.");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.brand = "Toyota";\n        car.speed = 100;\n        car.drive();\n    }\n}\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"methods-or-functions",children:"Methods or Functions"}),"\n",(0,l.jsxs)(n.h3,{id:"void-method",children:[(0,l.jsx)(n.code,{children:"void"})," Method"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Does not return a value.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public void greet() {\n    System.out.println("Hello!");\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"private-method",children:[(0,l.jsx)(n.code,{children:"private"})," Method"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Only accessible within the class where it is defined.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'private void secretMessage() {\n    System.out.println("This is private.");\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"static-method",children:[(0,l.jsx)(n.code,{children:"static"})," Method"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Belongs to the class rather than an instance.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public static void displayMessage() {\n    System.out.println("Static method called.");\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"method-with-return-type",children:"Method with Return Type"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Returns a value.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"public int add(int a, int b) {\n    return a + b;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"parameterized-method",children:"Parameterized Method"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Accepts parameters to perform actions.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public void greet(String name) {\n    System.out.println("Hello, " + name);\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,l.jsx)(n.h3,{id:"default-constructor",children:"Default Constructor"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Automatically provided if no constructor is defined.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'class MyClass {\n    MyClass() {\n        System.out.println("Default constructor called.");\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"parameterized-constructor",children:"Parameterized Constructor"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Accepts arguments to initialize fields."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class MyClass {\n    int value;\n\n    MyClass(int value) {\n        this.value = value;\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"this-keyword",children:[(0,l.jsx)(n.code,{children:"this"})," Keyword"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Refers to the current object instance."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class MyClass {\n    int value;\n\n    MyClass(int value) {\n        this.value = value;\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,l.jsx)(n.h3,{id:"what-is-encapsulation",children:"What is Encapsulation?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Restricting direct access to fields and methods by using access specifiers."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"getter--setter",children:"Getter & Setter"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Used to access and modify private fields."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"class MyClass {\n    private int number;\n\n    public int getNumber() {\n        return number;\n    }\n\n    public void setNumber(int number) {\n        this.number = number;\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,l.jsx)(n.h3,{id:"what-is-inheritance",children:"What is Inheritance?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Mechanism to inherit fields and methods from a parent class."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"types-of-inheritance",children:"Types of Inheritance"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Single, Multilevel, Hierarchical"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"super-keyword",children:[(0,l.jsx)(n.code,{children:"super"})," Keyword"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Refers to the parent class constructor or method."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'class Parent {\n    Parent() {\n        System.out.println("Parent constructor.");\n    }\n}\n\nclass Child extends Parent {\n    Child() {\n        super();\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,l.jsx)(n.h3,{id:"what-is-polymorphism",children:"What is Polymorphism?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ability to perform a single action in multiple ways."}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"overriding-methods-override",children:["Overriding Methods (",(0,l.jsx)(n.code,{children:"@Override"}),")"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Modifying parent class methods in the child class."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'class Parent {\n    void display() {\n        System.out.println("Parent method.");\n    }\n}\n\nclass Child extends Parent {\n    @Override\n    void display() {\n        System.out.println("Child method.");\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"abstraction",children:"Abstraction"}),"\n",(0,l.jsx)(n.h3,{id:"what-is-abstraction",children:"What is Abstraction?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Hiding implementation details while exposing functionality."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"abstract-class-and-method",children:"Abstract Class and Method"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Abstract class contains abstract and concrete methods.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"abstract class Animal {\n    abstract void sound();\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"extends-vs-implements",children:"extends vs implements"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"extends"}),": Used for inheritance."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"implements"}),": Used for interfaces."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"methods-in-abstract-class",children:"Methods in Abstract Class"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Can have both abstract and concrete methods."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'abstract class Animal {\n    abstract void sound();\n\n    void eat() {\n        System.out.println("Eating...");\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"super-in-implementing-class-for-abstract",children:[(0,l.jsx)(n.code,{children:"super"})," in Implementing Class for Abstract"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Refers to the parent class\u2019s constructor or methods."}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["A blueprint of a class.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"interface Animal {\n    void sound();\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"defaultandstatic-in-interface",children:["default",(0,l.jsx)(n.code,{children:"and"}),"static` in Interface"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"default"}),": Provides default implementation.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'interface Animal {\n    default void sleep() {\n        System.out.println("Sleeping...");\n    }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"static"}),": Belongs to the interface.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'interface Animal {\n    static void info() {\n        System.out.println("Animal info.");\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"super-in-implementing-class-for-interface",children:[(0,l.jsx)(n.code,{children:"super"})," in Implementing Class for Interface"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Used to call interface default methods."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'interface Animal {\n    default void sound() {\n        System.out.println("Default sound.");\n    }\n}\n\nclass Dog implements Animal {\n    public void sound() {\n        Animal.super.sound();\n        System.out.println("Dog barking.");\n    }\n}\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var i=s(6540);const l={},a=i.createContext(l);function t(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);